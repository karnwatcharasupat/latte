:py:mod:`latte.metrics.keras.interpolatability`
===============================================

.. py:module:: latte.metrics.keras.interpolatability

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   latte.metrics.keras.interpolatability.Smoothness
   latte.metrics.keras.interpolatability.Monotonicity




.. py:class:: Smoothness(**kwargs)

   Bases: :py:obj:`latte.metrics.keras.wrapper.KerasMetricWrapper`

   
   Encapsulates metric logic and state.

   :param name: (Optional) string name of the metric instance.
   :param dtype: (Optional) data type of the metric result.
   :param \*\*kwargs: Additional layer keywords arguments.

   Standalone usage:

   ```python
   m = SomeMetric(...)
   for input in ...:
     m.update_state(input)
   print('Final result: ', m.result().numpy())
   ```

   Usage with `compile()` API:

   ```python
   model = tf.keras.Sequential()
   model.add(tf.keras.layers.Dense(64, activation='relu'))
   model.add(tf.keras.layers.Dense(64, activation='relu'))
   model.add(tf.keras.layers.Dense(10, activation='softmax'))

   model.compile(optimizer=tf.keras.optimizers.RMSprop(0.01),
                 loss=tf.keras.losses.CategoricalCrossentropy(),
                 metrics=[tf.keras.metrics.CategoricalAccuracy()])

   data = np.random.random((1000, 32))
   labels = np.random.random((1000, 10))

   dataset = tf.data.Dataset.from_tensor_slices((data, labels))
   dataset = dataset.batch(32)

   model.fit(dataset, epochs=10)
   ```

   To be implemented by subclasses:
   * `__init__()`: All state variables should be created in this method by
     calling `self.add_weight()` like: `self.var = self.add_weight(...)`
   * `update_state()`: Has all updates to the state variables like:
     self.var.assign_add(...).
   * `result()`: Computes and returns a value for the metric
     from the state variables.

   Example subclass implementation:

   ```python
   class BinaryTruePositives(tf.keras.metrics.Metric):

     def __init__(self, name='binary_true_positives', **kwargs):
       super(BinaryTruePositives, self).__init__(name=name, **kwargs)
       self.true_positives = self.add_weight(name='tp', initializer='zeros')

     def update_state(self, y_true, y_pred, sample_weight=None):
       y_true = tf.cast(y_true, tf.bool)
       y_pred = tf.cast(y_pred, tf.bool)

       values = tf.logical_and(tf.equal(y_true, True), tf.equal(y_pred, True))
       values = tf.cast(values, self.dtype)
       if sample_weight is not None:
         sample_weight = tf.cast(sample_weight, self.dtype)
         sample_weight = tf.broadcast_to(sample_weight, values.shape)
         values = tf.multiply(values, sample_weight)
       self.true_positives.assign_add(tf.reduce_sum(values))

     def result(self):
       return self.true_positives
   ```















   ..
       !! processed by numpydoc !!
   .. py:method:: update_state(self, z, a)

      
      Accumulates statistics for the metric.

      Note: This function is executed as a graph function in graph mode.
      This means:
        a) Operations on the same resource are executed in textual order.
           This should make it easier to do things like add the updated
           value of a variable to another, for example.
        b) You don't need to worry about collecting the update ops to execute.
           All update ops added to the graph by this function will be executed.
        As a result, code should generally work the same way with graph or
        eager execution.

      :param \*args:
      :param \*\*kwargs: A mini-batch of inputs to the Metric.















      ..
          !! processed by numpydoc !!

   .. py:method:: result(self)

      
      Computes and returns the metric value tensor.

      Result computation is an idempotent operation that simply calculates the
      metric value using the state variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: reset_state(self)

      
      Resets all of the metric state variables.

      This function is called between epochs/steps,
      when a metric is evaluated during training.















      ..
          !! processed by numpydoc !!

   .. py:method:: dtype(self)
      :property:

      
      The dtype of the layer weights.

      This is equivalent to `Layer.dtype_policy.variable_dtype`. Unless
      mixed precision is used, this is the same as `Layer.compute_dtype`, the
      dtype of the layer's computations.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_config(self)

      
      Returns the serializable config of the metric.
















      ..
          !! processed by numpydoc !!

   .. py:method:: add_weight(self, name, shape=(), aggregation=variables_module.VariableAggregation.SUM, synchronization=variables_module.VariableSynchronization.ON_READ, initializer=None, dtype=None)

      
      Adds state variable. Only for use by subclasses.
















      ..
          !! processed by numpydoc !!

   .. py:method:: trainable_weights(self)
      :property:

      
      List of all trainable weights tracked by this layer.

      Trainable weights are updated via gradient descent during training.

      :returns: A list of trainable variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: non_trainable_weights(self)
      :property:

      
      List of all non-trainable weights tracked by this layer.

      Non-trainable weights are *not* updated during training. They are expected
      to be updated manually in `call()`.

      :returns: A list of non-trainable variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: reset_states(self)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: build(self, input_shape)

      
      Creates the variables of the layer (optional, for subclass implementers).

      This is a method that implementers of subclasses of `Layer` or `Model`
      can override if they need a state-creation step in-between
      layer instantiation and layer call.

      This is typically used to create the weights of `Layer` subclasses.

      :param input_shape: Instance of `TensorShape`, or list of instances of
                          `TensorShape` if the layer expects a list of inputs
                          (one instance per input).















      ..
          !! processed by numpydoc !!

   .. py:method:: call(self, inputs, *args, **kwargs)

      
      This is where the layer's logic lives.

      Note here that `call()` method in `tf.keras` is little bit different
      from `keras` API. In `keras` API, you can pass support masking for
      layers as additional arguments. Whereas `tf.keras` has `compute_mask()`
      method to support masking.

      :param inputs: Input tensor, or dict/list/tuple of input tensors.
                     The first positional `inputs` argument is subject to special rules:
                     - `inputs` must be explicitly passed. A layer cannot have zero
                       arguments, and `inputs` cannot be provided via the default value
                       of a keyword argument.
                     - NumPy array or Python scalar values in `inputs` get cast as tensors.
                     - Keras mask metadata is only collected from `inputs`.
                     - Layers are built (`build(input_shape)` method)
                       using shape info from `inputs` only.
                     - `input_spec` compatibility is only checked against `inputs`.
                     - Mixed precision input casting is only applied to `inputs`.
                       If a layer has tensor arguments in `*args` or `**kwargs`, their
                       casting behavior in mixed precision should be handled manually.
                     - The SavedModel input specification is generated using `inputs` only.
                     - Integration with various ecosystem packages like TFMOT, TFLite,
                       TF.js, etc is only supported for `inputs` and not for tensors in
                       positional and keyword arguments.
      :param \*args: Additional positional arguments. May contain tensors, although
                     this is not recommended, for the reasons above.
      :param \*\*kwargs: Additional keyword arguments. May contain tensors, although
                         this is not recommended, for the reasons above.
                         The following optional keyword arguments are reserved:
                         - `training`: Boolean scalar tensor of Python boolean indicating
                           whether the `call` is meant for training or inference.
                         - `mask`: Boolean input mask. If the layer's `call()` method takes a
                           `mask` argument, its default value will be set to the mask generated
                           for `inputs` by the previous layer (if `input` did come from a layer
                           that generated a corresponding mask, i.e. if it came from a Keras
                           layer with masking support).

      :returns: A tensor or list/tuple of tensors.















      ..
          !! processed by numpydoc !!

   .. py:method:: from_config(cls, config)
      :classmethod:

      
      Creates a layer from its config.

      This method is the reverse of `get_config`,
      capable of instantiating the same layer from the config
      dictionary. It does not handle layer connectivity
      (handled by Network), nor weights (handled by `set_weights`).

      :param config: A Python dictionary, typically the
                     output of get_config.

      :returns: A layer instance.















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_output_shape(self, input_shape)

      
      Computes the output shape of the layer.

      If the layer has not been built, this method will call `build` on the
      layer. This assumes that the layer will later be used with inputs that
      match the input shape provided here.

      :param input_shape: Shape tuple (tuple of integers)
                          or list of shape tuples (one per output tensor of the layer).
                          Shape tuples can include None for free dimensions,
                          instead of an integer.

      :returns: An input shape tuple.















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_output_signature(self, input_signature)

      
      Compute the output tensor signature of the layer based on the inputs.

      Unlike a TensorShape object, a TensorSpec object contains both shape
      and dtype information for a tensor. This method allows layers to provide
      output dtype information if it is different from the input dtype.
      For any layer that doesn't implement this function,
      the framework will fall back to use `compute_output_shape`, and will
      assume that the output dtype matches the input dtype.

      :param input_signature: Single TensorSpec or nested structure of TensorSpec
                              objects, describing a candidate input for the layer.

      :returns:

                Single TensorSpec or nested structure of TensorSpec objects, describing
                  how the layer would transform the provided input.

      :raises TypeError: If input_signature contains a non-TensorSpec object.















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_mask(self, inputs, mask=None)

      
      Computes an output mask tensor.

      :param inputs: Tensor or list of tensors.
      :param mask: Tensor or list of tensors.

      :returns:

                None or a tensor (or list of tensors,
                    one per output tensor of the layer).















      ..
          !! processed by numpydoc !!

   .. py:method:: name(self)
      :property:

      
      Name of the layer (string), set in the constructor.
















      ..
          !! processed by numpydoc !!

   .. py:method:: supports_masking(self)
      :property:

      
      Whether this layer supports computing a mask using `compute_mask`.
















      ..
          !! processed by numpydoc !!

   .. py:method:: dynamic(self)
      :property:

      
      Whether the layer is dynamic (eager-only); set in the constructor.
















      ..
          !! processed by numpydoc !!

   .. py:method:: stateful(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: trainable(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: activity_regularizer(self)
      :property:

      
      Optional regularizer function for the output of this layer.
















      ..
          !! processed by numpydoc !!

   .. py:method:: input_spec(self)
      :property:

      
      `InputSpec` instance(s) describing the input format for this layer.

      When you create a layer subclass, you can set `self.input_spec` to enable
      the layer to run input compatibility checks when it is called.
      Consider a `Conv2D` layer: it can only be called on a single input tensor
      of rank 4. As such, you can set, in `__init__()`:

      ```python
      self.input_spec = tf.keras.layers.InputSpec(ndim=4)
      ```

      Now, if you try to call the layer on an input that isn't rank 4
      (for instance, an input of shape `(2,)`, it will raise a nicely-formatted
      error:

      ```
      ValueError: Input 0 of layer conv2d is incompatible with the layer:
      expected ndim=4, found ndim=1. Full shape received: [2]
      ```

      Input checks that can be specified via `input_spec` include:
      - Structure (e.g. a single input, a list of 2 inputs, etc)
      - Shape
      - Rank (ndim)
      - Dtype

      For more information, see `tf.keras.layers.InputSpec`.

      :returns: A `tf.keras.layers.InputSpec` instance, or nested structure thereof.















      ..
          !! processed by numpydoc !!

   .. py:method:: weights(self)
      :property:

      
      Returns the list of all layer variables/weights.

      :returns: A list of variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: updates(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: losses(self)
      :property:

      
      List of losses added using the `add_loss()` API.

      Variable regularization tensors are created when this property is accessed,
      so it is eager safe: accessing `losses` under a `tf.GradientTape` will
      propagate gradients back to the corresponding variables.

      Examples:

      >>> class MyLayer(tf.keras.layers.Layer):
      ...   def call(self, inputs):
      ...     self.add_loss(tf.abs(tf.reduce_mean(inputs)))
      ...     return inputs
      >>> l = MyLayer()
      >>> l(np.ones((10, 1)))
      >>> l.losses
      [1.0]

      >>> inputs = tf.keras.Input(shape=(10,))
      >>> x = tf.keras.layers.Dense(10)(inputs)
      >>> outputs = tf.keras.layers.Dense(1)(x)
      >>> model = tf.keras.Model(inputs, outputs)
      >>> # Activity regularization.
      >>> len(model.losses)
      0
      >>> model.add_loss(tf.abs(tf.reduce_mean(x)))
      >>> len(model.losses)
      1

      >>> inputs = tf.keras.Input(shape=(10,))
      >>> d = tf.keras.layers.Dense(10, kernel_initializer='ones')
      >>> x = d(inputs)
      >>> outputs = tf.keras.layers.Dense(1)(x)
      >>> model = tf.keras.Model(inputs, outputs)
      >>> # Weight regularization.
      >>> model.add_loss(lambda: tf.reduce_mean(d.kernel))
      >>> model.losses
      [<tf.Tensor: shape=(), dtype=float32, numpy=1.0>]

      :returns: A list of tensors.















      ..
          !! processed by numpydoc !!

   .. py:method:: add_loss(self, losses, **kwargs)

      
      Add loss tensor(s), potentially dependent on layer inputs.

      Some losses (for instance, activity regularization losses) may be dependent
      on the inputs passed when calling a layer. Hence, when reusing the same
      layer on different inputs `a` and `b`, some entries in `layer.losses` may
      be dependent on `a` and some on `b`. This method automatically keeps track
      of dependencies.

      This method can be used inside a subclassed layer or model's `call`
      function, in which case `losses` should be a Tensor or list of Tensors.

      Example:

      ```python
      class MyLayer(tf.keras.layers.Layer):
        def call(self, inputs):
          self.add_loss(tf.abs(tf.reduce_mean(inputs)))
          return inputs
      ```

      This method can also be called directly on a Functional Model during
      construction. In this case, any loss Tensors passed to this Model must
      be symbolic and be able to be traced back to the model's `Input`s. These
      losses become part of the model's topology and are tracked in `get_config`.

      Example:

      ```python
      inputs = tf.keras.Input(shape=(10,))
      x = tf.keras.layers.Dense(10)(inputs)
      outputs = tf.keras.layers.Dense(1)(x)
      model = tf.keras.Model(inputs, outputs)
      # Activity regularization.
      model.add_loss(tf.abs(tf.reduce_mean(x)))
      ```

      If this is not the case for your loss (if, for example, your loss references
      a `Variable` of one of the model's layers), you can wrap your loss in a
      zero-argument lambda. These losses are not tracked as part of the model's
      topology since they can't be serialized.

      Example:

      ```python
      inputs = tf.keras.Input(shape=(10,))
      d = tf.keras.layers.Dense(10)
      x = d(inputs)
      outputs = tf.keras.layers.Dense(1)(x)
      model = tf.keras.Model(inputs, outputs)
      # Weight regularization.
      model.add_loss(lambda: tf.reduce_mean(d.kernel))
      ```

      :param losses: Loss tensor, or list/tuple of tensors. Rather than tensors, losses
                     may also be zero-argument callables which create a loss tensor.
      :param \*\*kwargs: Additional keyword arguments for backward compatibility.
                         Accepted values:
                           inputs - Deprecated, will be automatically inferred.















      ..
          !! processed by numpydoc !!

   .. py:method:: metrics(self)
      :property:

      
      List of metrics added using the `add_metric()` API.

      Example:

      >>> input = tf.keras.layers.Input(shape=(3,))
      >>> d = tf.keras.layers.Dense(2)
      >>> output = d(input)
      >>> d.add_metric(tf.reduce_max(output), name='max')
      >>> d.add_metric(tf.reduce_min(output), name='min')
      >>> [m.name for m in d.metrics]
      ['max', 'min']

      :returns: A list of `Metric` objects.















      ..
          !! processed by numpydoc !!

   .. py:method:: add_metric(self, value, name=None, **kwargs)

      
      Adds metric tensor to the layer.

      This method can be used inside the `call()` method of a subclassed layer
      or model.

      ```python
      class MyMetricLayer(tf.keras.layers.Layer):
        def __init__(self):
          super(MyMetricLayer, self).__init__(name='my_metric_layer')
          self.mean = tf.keras.metrics.Mean(name='metric_1')

        def call(self, inputs):
          self.add_metric(self.mean(inputs))
          self.add_metric(tf.reduce_sum(inputs), name='metric_2')
          return inputs
      ```

      This method can also be called directly on a Functional Model during
      construction. In this case, any tensor passed to this Model must
      be symbolic and be able to be traced back to the model's `Input`s. These
      metrics become part of the model's topology and are tracked when you
      save the model via `save()`.

      ```python
      inputs = tf.keras.Input(shape=(10,))
      x = tf.keras.layers.Dense(10)(inputs)
      outputs = tf.keras.layers.Dense(1)(x)
      model = tf.keras.Model(inputs, outputs)
      model.add_metric(math_ops.reduce_sum(x), name='metric_1')
      ```

      Note: Calling `add_metric()` with the result of a metric object on a
      Functional Model, as shown in the example below, is not supported. This is
      because we cannot trace the metric result tensor back to the model's inputs.

      ```python
      inputs = tf.keras.Input(shape=(10,))
      x = tf.keras.layers.Dense(10)(inputs)
      outputs = tf.keras.layers.Dense(1)(x)
      model = tf.keras.Model(inputs, outputs)
      model.add_metric(tf.keras.metrics.Mean()(x), name='metric_1')
      ```

      :param value: Metric tensor.
      :param name: String metric name.
      :param \*\*kwargs: Additional keyword arguments for backward compatibility.
                         Accepted values:
                         `aggregation` - When the `value` tensor provided is not the result of
                         calling a `keras.Metric` instance, it will be aggregated by default
                         using a `keras.Metric.Mean`.















      ..
          !! processed by numpydoc !!

   .. py:method:: add_update(self, updates, inputs=None)

      
      Add update op(s), potentially dependent on layer inputs.

      Weight updates (for instance, the updates of the moving mean and variance
      in a BatchNormalization layer) may be dependent on the inputs passed
      when calling a layer. Hence, when reusing the same layer on
      different inputs `a` and `b`, some entries in `layer.updates` may be
      dependent on `a` and some on `b`. This method automatically keeps track
      of dependencies.

      This call is ignored when eager execution is enabled (in that case, variable
      updates are run on the fly and thus do not need to be tracked for later
      execution).

      :param updates: Update op, or list/tuple of update ops, or zero-arg callable
                      that returns an update op. A zero-arg callable should be passed in
                      order to disable running the updates by setting `trainable=False`
                      on this Layer, when executing in Eager mode.
      :param inputs: Deprecated, will be automatically inferred.















      ..
          !! processed by numpydoc !!

   .. py:method:: set_weights(self, weights)

      
      Sets the weights of the layer, from NumPy arrays.

      The weights of a layer represent the state of the layer. This function
      sets the weight values from numpy arrays. The weight values should be
      passed in the order they are created by the layer. Note that the layer's
      weights must be instantiated before calling this function, by calling
      the layer.

      For example, a `Dense` layer returns a list of two values: the kernel matrix
      and the bias vector. These can be used to set the weights of another
      `Dense` layer:

      >>> layer_a = tf.keras.layers.Dense(1,
      ...   kernel_initializer=tf.constant_initializer(1.))
      >>> a_out = layer_a(tf.convert_to_tensor([[1., 2., 3.]]))
      >>> layer_a.get_weights()
      [array([[1.],
             [1.],
             [1.]], dtype=float32), array([0.], dtype=float32)]
      >>> layer_b = tf.keras.layers.Dense(1,
      ...   kernel_initializer=tf.constant_initializer(2.))
      >>> b_out = layer_b(tf.convert_to_tensor([[10., 20., 30.]]))
      >>> layer_b.get_weights()
      [array([[2.],
             [2.],
             [2.]], dtype=float32), array([0.], dtype=float32)]
      >>> layer_b.set_weights(layer_a.get_weights())
      >>> layer_b.get_weights()
      [array([[1.],
             [1.],
             [1.]], dtype=float32), array([0.], dtype=float32)]

      :param weights: a list of NumPy arrays. The number
                      of arrays and their shape must match
                      number of the dimensions of the weights
                      of the layer (i.e. it should match the
                      output of `get_weights`).

      :raises ValueError: If the provided weights list does not match the
          layer's specifications.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_weights(self)

      
      Returns the current weights of the layer, as NumPy arrays.

      The weights of a layer represent the state of the layer. This function
      returns both trainable and non-trainable weight values associated with this
      layer as a list of NumPy arrays, which can in turn be used to load state
      into similarly parameterized layers.

      For example, a `Dense` layer returns a list of two values: the kernel matrix
      and the bias vector. These can be used to set the weights of another
      `Dense` layer:

      >>> layer_a = tf.keras.layers.Dense(1,
      ...   kernel_initializer=tf.constant_initializer(1.))
      >>> a_out = layer_a(tf.convert_to_tensor([[1., 2., 3.]]))
      >>> layer_a.get_weights()
      [array([[1.],
             [1.],
             [1.]], dtype=float32), array([0.], dtype=float32)]
      >>> layer_b = tf.keras.layers.Dense(1,
      ...   kernel_initializer=tf.constant_initializer(2.))
      >>> b_out = layer_b(tf.convert_to_tensor([[10., 20., 30.]]))
      >>> layer_b.get_weights()
      [array([[2.],
             [2.],
             [2.]], dtype=float32), array([0.], dtype=float32)]
      >>> layer_b.set_weights(layer_a.get_weights())
      >>> layer_b.get_weights()
      [array([[1.],
             [1.],
             [1.]], dtype=float32), array([0.], dtype=float32)]

      :returns: Weights values as a list of NumPy arrays.















      ..
          !! processed by numpydoc !!

   .. py:method:: finalize_state(self)

      
      Finalizes the layers state after updating layer weights.

      This function can be subclassed in a layer and will be called after updating
      a layer weights. It can be overridden to finalize any additional layer state
      after a weight update.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_updates_for(self, inputs)

      
      Deprecated, do NOT use!

      Retrieves updates relevant to a specific set of inputs.

      :param inputs: Input tensor or list/tuple of input tensors.

      :returns: List of update ops of the layer that depend on `inputs`.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_losses_for(self, inputs)

      
      Deprecated, do NOT use!

      Retrieves losses relevant to a specific set of inputs.

      :param inputs: Input tensor or list/tuple of input tensors.

      :returns: List of loss tensors of the layer that depend on `inputs`.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_input_mask_at(self, node_index)

      
      Retrieves the input mask tensor(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first time the layer was called.

      :returns: A mask tensor
                (or list of tensors if the layer has multiple inputs).















      ..
          !! processed by numpydoc !!

   .. py:method:: get_output_mask_at(self, node_index)

      
      Retrieves the output mask tensor(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first time the layer was called.

      :returns: A mask tensor
                (or list of tensors if the layer has multiple outputs).















      ..
          !! processed by numpydoc !!

   .. py:method:: input_mask(self)
      :property:

      
      Retrieves the input mask tensor(s) of a layer.

      Only applicable if the layer has exactly one inbound node,
      i.e. if it is connected to one incoming layer.

      :returns: Input mask tensor (potentially None) or list of input
                mask tensors.

      :raises AttributeError: if the layer is connected to
      :raises more than one incoming layers.:















      ..
          !! processed by numpydoc !!

   .. py:method:: output_mask(self)
      :property:

      
      Retrieves the output mask tensor(s) of a layer.

      Only applicable if the layer has exactly one inbound node,
      i.e. if it is connected to one incoming layer.

      :returns: Output mask tensor (potentially None) or list of output
                mask tensors.

      :raises AttributeError: if the layer is connected to
      :raises more than one incoming layers.:















      ..
          !! processed by numpydoc !!

   .. py:method:: get_input_shape_at(self, node_index)

      
      Retrieves the input shape(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first time the layer was called.

      :returns: A shape tuple
                (or list of shape tuples if the layer has multiple inputs).

      :raises RuntimeError: If called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_output_shape_at(self, node_index)

      
      Retrieves the output shape(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first time the layer was called.

      :returns: A shape tuple
                (or list of shape tuples if the layer has multiple outputs).

      :raises RuntimeError: If called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_input_at(self, node_index)

      
      Retrieves the input tensor(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first input node of the layer.

      :returns: A tensor (or list of tensors if the layer has multiple inputs).

      :raises RuntimeError: If called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_output_at(self, node_index)

      
      Retrieves the output tensor(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first output node of the layer.

      :returns: A tensor (or list of tensors if the layer has multiple outputs).

      :raises RuntimeError: If called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: input(self)
      :property:

      
      Retrieves the input tensor(s) of a layer.

      Only applicable if the layer has exactly one input,
      i.e. if it is connected to one incoming layer.

      :returns: Input tensor or list of input tensors.

      :raises RuntimeError: If called in Eager mode.
      :raises AttributeError: If no inbound nodes are found.















      ..
          !! processed by numpydoc !!

   .. py:method:: output(self)
      :property:

      
      Retrieves the output tensor(s) of a layer.

      Only applicable if the layer has exactly one output,
      i.e. if it is connected to one incoming layer.

      :returns: Output tensor or list of output tensors.

      :raises AttributeError: if the layer is connected to more than one incoming
          layers.
      :raises RuntimeError: if called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: input_shape(self)
      :property:

      
      Retrieves the input shape(s) of a layer.

      Only applicable if the layer has exactly one input,
      i.e. if it is connected to one incoming layer, or if all inputs
      have the same shape.

      :returns: Input shape, as an integer shape tuple
                (or list of shape tuples, one tuple per input tensor).

      :raises AttributeError: if the layer has no defined input_shape.
      :raises RuntimeError: if called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: count_params(self)

      
      Count the total number of scalars composing the weights.

      :returns: An integer count.

      :raises ValueError: if the layer isn't yet built
          (in which case its weights aren't yet defined).















      ..
          !! processed by numpydoc !!

   .. py:method:: output_shape(self)
      :property:

      
      Retrieves the output shape(s) of a layer.

      Only applicable if the layer has one output,
      or if all outputs have the same shape.

      :returns: Output shape, as an integer shape tuple
                (or list of shape tuples, one tuple per output tensor).

      :raises AttributeError: if the layer has no defined output shape.
      :raises RuntimeError: if called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: inbound_nodes(self)
      :property:

      
      Deprecated, do NOT use! Only for compatibility with external Keras.
















      ..
          !! processed by numpydoc !!

   .. py:method:: outbound_nodes(self)
      :property:

      
      Deprecated, do NOT use! Only for compatibility with external Keras.
















      ..
          !! processed by numpydoc !!

   .. py:method:: apply(self, inputs, *args, **kwargs)

      
      Deprecated, do NOT use!

      This is an alias of `self.__call__`.

      :param inputs: Input tensor(s).
      :param \*args: additional positional arguments to be passed to `self.call`.
      :param \*\*kwargs: additional keyword arguments to be passed to `self.call`.

      :returns: Output tensor(s).















      ..
          !! processed by numpydoc !!

   .. py:method:: add_variable(self, *args, **kwargs)

      
      Deprecated, do NOT use! Alias for `add_weight`.
















      ..
          !! processed by numpydoc !!

   .. py:method:: variables(self)
      :property:

      
      Returns the list of all layer variables/weights.

      Alias of `self.weights`.

      Note: This will not track the weights of nested `tf.Modules` that are not
      themselves Keras layers.

      :returns: A list of variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: trainable_variables(self)
      :property:

      
      Sequence of trainable variables owned by this module and its submodules.

      Note: this method uses reflection to find variables on the current instance
      and submodules. For performance reasons you may wish to cache the result
      of calling this method if you don't expect the return value to change.

      :returns: A sequence of variables for the current module (sorted by attribute
                name) followed by variables from all submodules recursively (breadth
                first).















      ..
          !! processed by numpydoc !!

   .. py:method:: non_trainable_variables(self)
      :property:

      
      Sequence of non-trainable variables owned by this module and its submodules.

      Note: this method uses reflection to find variables on the current instance
      and submodules. For performance reasons you may wish to cache the result
      of calling this method if you don't expect the return value to change.

      :returns: A sequence of variables for the current module (sorted by attribute
                name) followed by variables from all submodules recursively (breadth
                first).















      ..
          !! processed by numpydoc !!

   .. py:method:: dtype_policy(self)
      :property:

      
      The dtype policy associated with this layer.

      This is an instance of a `tf.keras.mixed_precision.Policy`.















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_dtype(self)
      :property:

      
      The dtype of the layer's computations.

      This is equivalent to `Layer.dtype_policy.compute_dtype`. Unless
      mixed precision is used, this is the same as `Layer.dtype`, the dtype of
      the weights.

      Layers automatically cast their inputs to the compute dtype, which causes
      computations and the output to be in the compute dtype as well. This is done
      by the base Layer class in `Layer.__call__`, so you do not have to insert
      these casts if implementing your own layer.

      Layers often perform certain internal computations in higher precision when
      `compute_dtype` is float16 or bfloat16 for numeric stability. The output
      will still typically be float16 or bfloat16 in such cases.

      :returns: The layer's compute dtype.















      ..
          !! processed by numpydoc !!

   .. py:method:: variable_dtype(self)
      :property:

      
      Alias of `Layer.dtype`, the dtype of the weights.
















      ..
          !! processed by numpydoc !!

   .. py:method:: name_scope(self)
      :property:

      
      Returns a `tf.name_scope` instance for this class.
















      ..
          !! processed by numpydoc !!

   .. py:method:: submodules(self)
      :property:

      
      Sequence of all sub-modules.

      Submodules are modules which are properties of this module, or found as
      properties of modules which are properties of this module (and so on).

      >>> a = tf.Module()
      >>> b = tf.Module()
      >>> c = tf.Module()
      >>> a.b = b
      >>> b.c = c
      >>> list(a.submodules) == [b, c]
      True
      >>> list(b.submodules) == [c]
      True
      >>> list(c.submodules) == []
      True

      :returns: A sequence of all submodules.















      ..
          !! processed by numpydoc !!

   .. py:method:: with_name_scope(cls, method)
      :classmethod:

      
      Decorator to automatically enter the module name scope.

      >>> class MyModule(tf.Module):
      ...   @tf.Module.with_name_scope
      ...   def __call__(self, x):
      ...     if not hasattr(self, 'w'):
      ...       self.w = tf.Variable(tf.random.normal([x.shape[1], 3]))
      ...     return tf.matmul(x, self.w)

      Using the above module would produce `tf.Variable`s and `tf.Tensor`s whose
      names included the module name:

      >>> mod = MyModule()
      >>> mod(tf.ones([1, 2]))
      <tf.Tensor: shape=(1, 3), dtype=float32, numpy=..., dtype=float32)>
      >>> mod.w
      <tf.Variable 'my_module/Variable:0' shape=(2, 3) dtype=float32,
      numpy=..., dtype=float32)>

      :param method: The method to wrap.

      :returns: The original method wrapped such that it enters the module's name scope.















      ..
          !! processed by numpydoc !!


.. py:class:: Monotonicity(**kwargs)

   Bases: :py:obj:`latte.metrics.keras.wrapper.KerasMetricWrapper`

   
   Encapsulates metric logic and state.

   :param name: (Optional) string name of the metric instance.
   :param dtype: (Optional) data type of the metric result.
   :param \*\*kwargs: Additional layer keywords arguments.

   Standalone usage:

   ```python
   m = SomeMetric(...)
   for input in ...:
     m.update_state(input)
   print('Final result: ', m.result().numpy())
   ```

   Usage with `compile()` API:

   ```python
   model = tf.keras.Sequential()
   model.add(tf.keras.layers.Dense(64, activation='relu'))
   model.add(tf.keras.layers.Dense(64, activation='relu'))
   model.add(tf.keras.layers.Dense(10, activation='softmax'))

   model.compile(optimizer=tf.keras.optimizers.RMSprop(0.01),
                 loss=tf.keras.losses.CategoricalCrossentropy(),
                 metrics=[tf.keras.metrics.CategoricalAccuracy()])

   data = np.random.random((1000, 32))
   labels = np.random.random((1000, 10))

   dataset = tf.data.Dataset.from_tensor_slices((data, labels))
   dataset = dataset.batch(32)

   model.fit(dataset, epochs=10)
   ```

   To be implemented by subclasses:
   * `__init__()`: All state variables should be created in this method by
     calling `self.add_weight()` like: `self.var = self.add_weight(...)`
   * `update_state()`: Has all updates to the state variables like:
     self.var.assign_add(...).
   * `result()`: Computes and returns a value for the metric
     from the state variables.

   Example subclass implementation:

   ```python
   class BinaryTruePositives(tf.keras.metrics.Metric):

     def __init__(self, name='binary_true_positives', **kwargs):
       super(BinaryTruePositives, self).__init__(name=name, **kwargs)
       self.true_positives = self.add_weight(name='tp', initializer='zeros')

     def update_state(self, y_true, y_pred, sample_weight=None):
       y_true = tf.cast(y_true, tf.bool)
       y_pred = tf.cast(y_pred, tf.bool)

       values = tf.logical_and(tf.equal(y_true, True), tf.equal(y_pred, True))
       values = tf.cast(values, self.dtype)
       if sample_weight is not None:
         sample_weight = tf.cast(sample_weight, self.dtype)
         sample_weight = tf.broadcast_to(sample_weight, values.shape)
         values = tf.multiply(values, sample_weight)
       self.true_positives.assign_add(tf.reduce_sum(values))

     def result(self):
       return self.true_positives
   ```















   ..
       !! processed by numpydoc !!
   .. py:method:: update_state(self, z, a)

      
      Accumulates statistics for the metric.

      Note: This function is executed as a graph function in graph mode.
      This means:
        a) Operations on the same resource are executed in textual order.
           This should make it easier to do things like add the updated
           value of a variable to another, for example.
        b) You don't need to worry about collecting the update ops to execute.
           All update ops added to the graph by this function will be executed.
        As a result, code should generally work the same way with graph or
        eager execution.

      :param \*args:
      :param \*\*kwargs: A mini-batch of inputs to the Metric.















      ..
          !! processed by numpydoc !!

   .. py:method:: result(self)

      
      Computes and returns the metric value tensor.

      Result computation is an idempotent operation that simply calculates the
      metric value using the state variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: reset_state(self)

      
      Resets all of the metric state variables.

      This function is called between epochs/steps,
      when a metric is evaluated during training.















      ..
          !! processed by numpydoc !!

   .. py:method:: dtype(self)
      :property:

      
      The dtype of the layer weights.

      This is equivalent to `Layer.dtype_policy.variable_dtype`. Unless
      mixed precision is used, this is the same as `Layer.compute_dtype`, the
      dtype of the layer's computations.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_config(self)

      
      Returns the serializable config of the metric.
















      ..
          !! processed by numpydoc !!

   .. py:method:: add_weight(self, name, shape=(), aggregation=variables_module.VariableAggregation.SUM, synchronization=variables_module.VariableSynchronization.ON_READ, initializer=None, dtype=None)

      
      Adds state variable. Only for use by subclasses.
















      ..
          !! processed by numpydoc !!

   .. py:method:: trainable_weights(self)
      :property:

      
      List of all trainable weights tracked by this layer.

      Trainable weights are updated via gradient descent during training.

      :returns: A list of trainable variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: non_trainable_weights(self)
      :property:

      
      List of all non-trainable weights tracked by this layer.

      Non-trainable weights are *not* updated during training. They are expected
      to be updated manually in `call()`.

      :returns: A list of non-trainable variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: reset_states(self)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: build(self, input_shape)

      
      Creates the variables of the layer (optional, for subclass implementers).

      This is a method that implementers of subclasses of `Layer` or `Model`
      can override if they need a state-creation step in-between
      layer instantiation and layer call.

      This is typically used to create the weights of `Layer` subclasses.

      :param input_shape: Instance of `TensorShape`, or list of instances of
                          `TensorShape` if the layer expects a list of inputs
                          (one instance per input).















      ..
          !! processed by numpydoc !!

   .. py:method:: call(self, inputs, *args, **kwargs)

      
      This is where the layer's logic lives.

      Note here that `call()` method in `tf.keras` is little bit different
      from `keras` API. In `keras` API, you can pass support masking for
      layers as additional arguments. Whereas `tf.keras` has `compute_mask()`
      method to support masking.

      :param inputs: Input tensor, or dict/list/tuple of input tensors.
                     The first positional `inputs` argument is subject to special rules:
                     - `inputs` must be explicitly passed. A layer cannot have zero
                       arguments, and `inputs` cannot be provided via the default value
                       of a keyword argument.
                     - NumPy array or Python scalar values in `inputs` get cast as tensors.
                     - Keras mask metadata is only collected from `inputs`.
                     - Layers are built (`build(input_shape)` method)
                       using shape info from `inputs` only.
                     - `input_spec` compatibility is only checked against `inputs`.
                     - Mixed precision input casting is only applied to `inputs`.
                       If a layer has tensor arguments in `*args` or `**kwargs`, their
                       casting behavior in mixed precision should be handled manually.
                     - The SavedModel input specification is generated using `inputs` only.
                     - Integration with various ecosystem packages like TFMOT, TFLite,
                       TF.js, etc is only supported for `inputs` and not for tensors in
                       positional and keyword arguments.
      :param \*args: Additional positional arguments. May contain tensors, although
                     this is not recommended, for the reasons above.
      :param \*\*kwargs: Additional keyword arguments. May contain tensors, although
                         this is not recommended, for the reasons above.
                         The following optional keyword arguments are reserved:
                         - `training`: Boolean scalar tensor of Python boolean indicating
                           whether the `call` is meant for training or inference.
                         - `mask`: Boolean input mask. If the layer's `call()` method takes a
                           `mask` argument, its default value will be set to the mask generated
                           for `inputs` by the previous layer (if `input` did come from a layer
                           that generated a corresponding mask, i.e. if it came from a Keras
                           layer with masking support).

      :returns: A tensor or list/tuple of tensors.















      ..
          !! processed by numpydoc !!

   .. py:method:: from_config(cls, config)
      :classmethod:

      
      Creates a layer from its config.

      This method is the reverse of `get_config`,
      capable of instantiating the same layer from the config
      dictionary. It does not handle layer connectivity
      (handled by Network), nor weights (handled by `set_weights`).

      :param config: A Python dictionary, typically the
                     output of get_config.

      :returns: A layer instance.















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_output_shape(self, input_shape)

      
      Computes the output shape of the layer.

      If the layer has not been built, this method will call `build` on the
      layer. This assumes that the layer will later be used with inputs that
      match the input shape provided here.

      :param input_shape: Shape tuple (tuple of integers)
                          or list of shape tuples (one per output tensor of the layer).
                          Shape tuples can include None for free dimensions,
                          instead of an integer.

      :returns: An input shape tuple.















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_output_signature(self, input_signature)

      
      Compute the output tensor signature of the layer based on the inputs.

      Unlike a TensorShape object, a TensorSpec object contains both shape
      and dtype information for a tensor. This method allows layers to provide
      output dtype information if it is different from the input dtype.
      For any layer that doesn't implement this function,
      the framework will fall back to use `compute_output_shape`, and will
      assume that the output dtype matches the input dtype.

      :param input_signature: Single TensorSpec or nested structure of TensorSpec
                              objects, describing a candidate input for the layer.

      :returns:

                Single TensorSpec or nested structure of TensorSpec objects, describing
                  how the layer would transform the provided input.

      :raises TypeError: If input_signature contains a non-TensorSpec object.















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_mask(self, inputs, mask=None)

      
      Computes an output mask tensor.

      :param inputs: Tensor or list of tensors.
      :param mask: Tensor or list of tensors.

      :returns:

                None or a tensor (or list of tensors,
                    one per output tensor of the layer).















      ..
          !! processed by numpydoc !!

   .. py:method:: name(self)
      :property:

      
      Name of the layer (string), set in the constructor.
















      ..
          !! processed by numpydoc !!

   .. py:method:: supports_masking(self)
      :property:

      
      Whether this layer supports computing a mask using `compute_mask`.
















      ..
          !! processed by numpydoc !!

   .. py:method:: dynamic(self)
      :property:

      
      Whether the layer is dynamic (eager-only); set in the constructor.
















      ..
          !! processed by numpydoc !!

   .. py:method:: stateful(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: trainable(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: activity_regularizer(self)
      :property:

      
      Optional regularizer function for the output of this layer.
















      ..
          !! processed by numpydoc !!

   .. py:method:: input_spec(self)
      :property:

      
      `InputSpec` instance(s) describing the input format for this layer.

      When you create a layer subclass, you can set `self.input_spec` to enable
      the layer to run input compatibility checks when it is called.
      Consider a `Conv2D` layer: it can only be called on a single input tensor
      of rank 4. As such, you can set, in `__init__()`:

      ```python
      self.input_spec = tf.keras.layers.InputSpec(ndim=4)
      ```

      Now, if you try to call the layer on an input that isn't rank 4
      (for instance, an input of shape `(2,)`, it will raise a nicely-formatted
      error:

      ```
      ValueError: Input 0 of layer conv2d is incompatible with the layer:
      expected ndim=4, found ndim=1. Full shape received: [2]
      ```

      Input checks that can be specified via `input_spec` include:
      - Structure (e.g. a single input, a list of 2 inputs, etc)
      - Shape
      - Rank (ndim)
      - Dtype

      For more information, see `tf.keras.layers.InputSpec`.

      :returns: A `tf.keras.layers.InputSpec` instance, or nested structure thereof.















      ..
          !! processed by numpydoc !!

   .. py:method:: weights(self)
      :property:

      
      Returns the list of all layer variables/weights.

      :returns: A list of variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: updates(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: losses(self)
      :property:

      
      List of losses added using the `add_loss()` API.

      Variable regularization tensors are created when this property is accessed,
      so it is eager safe: accessing `losses` under a `tf.GradientTape` will
      propagate gradients back to the corresponding variables.

      Examples:

      >>> class MyLayer(tf.keras.layers.Layer):
      ...   def call(self, inputs):
      ...     self.add_loss(tf.abs(tf.reduce_mean(inputs)))
      ...     return inputs
      >>> l = MyLayer()
      >>> l(np.ones((10, 1)))
      >>> l.losses
      [1.0]

      >>> inputs = tf.keras.Input(shape=(10,))
      >>> x = tf.keras.layers.Dense(10)(inputs)
      >>> outputs = tf.keras.layers.Dense(1)(x)
      >>> model = tf.keras.Model(inputs, outputs)
      >>> # Activity regularization.
      >>> len(model.losses)
      0
      >>> model.add_loss(tf.abs(tf.reduce_mean(x)))
      >>> len(model.losses)
      1

      >>> inputs = tf.keras.Input(shape=(10,))
      >>> d = tf.keras.layers.Dense(10, kernel_initializer='ones')
      >>> x = d(inputs)
      >>> outputs = tf.keras.layers.Dense(1)(x)
      >>> model = tf.keras.Model(inputs, outputs)
      >>> # Weight regularization.
      >>> model.add_loss(lambda: tf.reduce_mean(d.kernel))
      >>> model.losses
      [<tf.Tensor: shape=(), dtype=float32, numpy=1.0>]

      :returns: A list of tensors.















      ..
          !! processed by numpydoc !!

   .. py:method:: add_loss(self, losses, **kwargs)

      
      Add loss tensor(s), potentially dependent on layer inputs.

      Some losses (for instance, activity regularization losses) may be dependent
      on the inputs passed when calling a layer. Hence, when reusing the same
      layer on different inputs `a` and `b`, some entries in `layer.losses` may
      be dependent on `a` and some on `b`. This method automatically keeps track
      of dependencies.

      This method can be used inside a subclassed layer or model's `call`
      function, in which case `losses` should be a Tensor or list of Tensors.

      Example:

      ```python
      class MyLayer(tf.keras.layers.Layer):
        def call(self, inputs):
          self.add_loss(tf.abs(tf.reduce_mean(inputs)))
          return inputs
      ```

      This method can also be called directly on a Functional Model during
      construction. In this case, any loss Tensors passed to this Model must
      be symbolic and be able to be traced back to the model's `Input`s. These
      losses become part of the model's topology and are tracked in `get_config`.

      Example:

      ```python
      inputs = tf.keras.Input(shape=(10,))
      x = tf.keras.layers.Dense(10)(inputs)
      outputs = tf.keras.layers.Dense(1)(x)
      model = tf.keras.Model(inputs, outputs)
      # Activity regularization.
      model.add_loss(tf.abs(tf.reduce_mean(x)))
      ```

      If this is not the case for your loss (if, for example, your loss references
      a `Variable` of one of the model's layers), you can wrap your loss in a
      zero-argument lambda. These losses are not tracked as part of the model's
      topology since they can't be serialized.

      Example:

      ```python
      inputs = tf.keras.Input(shape=(10,))
      d = tf.keras.layers.Dense(10)
      x = d(inputs)
      outputs = tf.keras.layers.Dense(1)(x)
      model = tf.keras.Model(inputs, outputs)
      # Weight regularization.
      model.add_loss(lambda: tf.reduce_mean(d.kernel))
      ```

      :param losses: Loss tensor, or list/tuple of tensors. Rather than tensors, losses
                     may also be zero-argument callables which create a loss tensor.
      :param \*\*kwargs: Additional keyword arguments for backward compatibility.
                         Accepted values:
                           inputs - Deprecated, will be automatically inferred.















      ..
          !! processed by numpydoc !!

   .. py:method:: metrics(self)
      :property:

      
      List of metrics added using the `add_metric()` API.

      Example:

      >>> input = tf.keras.layers.Input(shape=(3,))
      >>> d = tf.keras.layers.Dense(2)
      >>> output = d(input)
      >>> d.add_metric(tf.reduce_max(output), name='max')
      >>> d.add_metric(tf.reduce_min(output), name='min')
      >>> [m.name for m in d.metrics]
      ['max', 'min']

      :returns: A list of `Metric` objects.















      ..
          !! processed by numpydoc !!

   .. py:method:: add_metric(self, value, name=None, **kwargs)

      
      Adds metric tensor to the layer.

      This method can be used inside the `call()` method of a subclassed layer
      or model.

      ```python
      class MyMetricLayer(tf.keras.layers.Layer):
        def __init__(self):
          super(MyMetricLayer, self).__init__(name='my_metric_layer')
          self.mean = tf.keras.metrics.Mean(name='metric_1')

        def call(self, inputs):
          self.add_metric(self.mean(inputs))
          self.add_metric(tf.reduce_sum(inputs), name='metric_2')
          return inputs
      ```

      This method can also be called directly on a Functional Model during
      construction. In this case, any tensor passed to this Model must
      be symbolic and be able to be traced back to the model's `Input`s. These
      metrics become part of the model's topology and are tracked when you
      save the model via `save()`.

      ```python
      inputs = tf.keras.Input(shape=(10,))
      x = tf.keras.layers.Dense(10)(inputs)
      outputs = tf.keras.layers.Dense(1)(x)
      model = tf.keras.Model(inputs, outputs)
      model.add_metric(math_ops.reduce_sum(x), name='metric_1')
      ```

      Note: Calling `add_metric()` with the result of a metric object on a
      Functional Model, as shown in the example below, is not supported. This is
      because we cannot trace the metric result tensor back to the model's inputs.

      ```python
      inputs = tf.keras.Input(shape=(10,))
      x = tf.keras.layers.Dense(10)(inputs)
      outputs = tf.keras.layers.Dense(1)(x)
      model = tf.keras.Model(inputs, outputs)
      model.add_metric(tf.keras.metrics.Mean()(x), name='metric_1')
      ```

      :param value: Metric tensor.
      :param name: String metric name.
      :param \*\*kwargs: Additional keyword arguments for backward compatibility.
                         Accepted values:
                         `aggregation` - When the `value` tensor provided is not the result of
                         calling a `keras.Metric` instance, it will be aggregated by default
                         using a `keras.Metric.Mean`.















      ..
          !! processed by numpydoc !!

   .. py:method:: add_update(self, updates, inputs=None)

      
      Add update op(s), potentially dependent on layer inputs.

      Weight updates (for instance, the updates of the moving mean and variance
      in a BatchNormalization layer) may be dependent on the inputs passed
      when calling a layer. Hence, when reusing the same layer on
      different inputs `a` and `b`, some entries in `layer.updates` may be
      dependent on `a` and some on `b`. This method automatically keeps track
      of dependencies.

      This call is ignored when eager execution is enabled (in that case, variable
      updates are run on the fly and thus do not need to be tracked for later
      execution).

      :param updates: Update op, or list/tuple of update ops, or zero-arg callable
                      that returns an update op. A zero-arg callable should be passed in
                      order to disable running the updates by setting `trainable=False`
                      on this Layer, when executing in Eager mode.
      :param inputs: Deprecated, will be automatically inferred.















      ..
          !! processed by numpydoc !!

   .. py:method:: set_weights(self, weights)

      
      Sets the weights of the layer, from NumPy arrays.

      The weights of a layer represent the state of the layer. This function
      sets the weight values from numpy arrays. The weight values should be
      passed in the order they are created by the layer. Note that the layer's
      weights must be instantiated before calling this function, by calling
      the layer.

      For example, a `Dense` layer returns a list of two values: the kernel matrix
      and the bias vector. These can be used to set the weights of another
      `Dense` layer:

      >>> layer_a = tf.keras.layers.Dense(1,
      ...   kernel_initializer=tf.constant_initializer(1.))
      >>> a_out = layer_a(tf.convert_to_tensor([[1., 2., 3.]]))
      >>> layer_a.get_weights()
      [array([[1.],
             [1.],
             [1.]], dtype=float32), array([0.], dtype=float32)]
      >>> layer_b = tf.keras.layers.Dense(1,
      ...   kernel_initializer=tf.constant_initializer(2.))
      >>> b_out = layer_b(tf.convert_to_tensor([[10., 20., 30.]]))
      >>> layer_b.get_weights()
      [array([[2.],
             [2.],
             [2.]], dtype=float32), array([0.], dtype=float32)]
      >>> layer_b.set_weights(layer_a.get_weights())
      >>> layer_b.get_weights()
      [array([[1.],
             [1.],
             [1.]], dtype=float32), array([0.], dtype=float32)]

      :param weights: a list of NumPy arrays. The number
                      of arrays and their shape must match
                      number of the dimensions of the weights
                      of the layer (i.e. it should match the
                      output of `get_weights`).

      :raises ValueError: If the provided weights list does not match the
          layer's specifications.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_weights(self)

      
      Returns the current weights of the layer, as NumPy arrays.

      The weights of a layer represent the state of the layer. This function
      returns both trainable and non-trainable weight values associated with this
      layer as a list of NumPy arrays, which can in turn be used to load state
      into similarly parameterized layers.

      For example, a `Dense` layer returns a list of two values: the kernel matrix
      and the bias vector. These can be used to set the weights of another
      `Dense` layer:

      >>> layer_a = tf.keras.layers.Dense(1,
      ...   kernel_initializer=tf.constant_initializer(1.))
      >>> a_out = layer_a(tf.convert_to_tensor([[1., 2., 3.]]))
      >>> layer_a.get_weights()
      [array([[1.],
             [1.],
             [1.]], dtype=float32), array([0.], dtype=float32)]
      >>> layer_b = tf.keras.layers.Dense(1,
      ...   kernel_initializer=tf.constant_initializer(2.))
      >>> b_out = layer_b(tf.convert_to_tensor([[10., 20., 30.]]))
      >>> layer_b.get_weights()
      [array([[2.],
             [2.],
             [2.]], dtype=float32), array([0.], dtype=float32)]
      >>> layer_b.set_weights(layer_a.get_weights())
      >>> layer_b.get_weights()
      [array([[1.],
             [1.],
             [1.]], dtype=float32), array([0.], dtype=float32)]

      :returns: Weights values as a list of NumPy arrays.















      ..
          !! processed by numpydoc !!

   .. py:method:: finalize_state(self)

      
      Finalizes the layers state after updating layer weights.

      This function can be subclassed in a layer and will be called after updating
      a layer weights. It can be overridden to finalize any additional layer state
      after a weight update.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_updates_for(self, inputs)

      
      Deprecated, do NOT use!

      Retrieves updates relevant to a specific set of inputs.

      :param inputs: Input tensor or list/tuple of input tensors.

      :returns: List of update ops of the layer that depend on `inputs`.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_losses_for(self, inputs)

      
      Deprecated, do NOT use!

      Retrieves losses relevant to a specific set of inputs.

      :param inputs: Input tensor or list/tuple of input tensors.

      :returns: List of loss tensors of the layer that depend on `inputs`.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_input_mask_at(self, node_index)

      
      Retrieves the input mask tensor(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first time the layer was called.

      :returns: A mask tensor
                (or list of tensors if the layer has multiple inputs).















      ..
          !! processed by numpydoc !!

   .. py:method:: get_output_mask_at(self, node_index)

      
      Retrieves the output mask tensor(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first time the layer was called.

      :returns: A mask tensor
                (or list of tensors if the layer has multiple outputs).















      ..
          !! processed by numpydoc !!

   .. py:method:: input_mask(self)
      :property:

      
      Retrieves the input mask tensor(s) of a layer.

      Only applicable if the layer has exactly one inbound node,
      i.e. if it is connected to one incoming layer.

      :returns: Input mask tensor (potentially None) or list of input
                mask tensors.

      :raises AttributeError: if the layer is connected to
      :raises more than one incoming layers.:















      ..
          !! processed by numpydoc !!

   .. py:method:: output_mask(self)
      :property:

      
      Retrieves the output mask tensor(s) of a layer.

      Only applicable if the layer has exactly one inbound node,
      i.e. if it is connected to one incoming layer.

      :returns: Output mask tensor (potentially None) or list of output
                mask tensors.

      :raises AttributeError: if the layer is connected to
      :raises more than one incoming layers.:















      ..
          !! processed by numpydoc !!

   .. py:method:: get_input_shape_at(self, node_index)

      
      Retrieves the input shape(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first time the layer was called.

      :returns: A shape tuple
                (or list of shape tuples if the layer has multiple inputs).

      :raises RuntimeError: If called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_output_shape_at(self, node_index)

      
      Retrieves the output shape(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first time the layer was called.

      :returns: A shape tuple
                (or list of shape tuples if the layer has multiple outputs).

      :raises RuntimeError: If called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_input_at(self, node_index)

      
      Retrieves the input tensor(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first input node of the layer.

      :returns: A tensor (or list of tensors if the layer has multiple inputs).

      :raises RuntimeError: If called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: get_output_at(self, node_index)

      
      Retrieves the output tensor(s) of a layer at a given node.

      :param node_index: Integer, index of the node
                         from which to retrieve the attribute.
                         E.g. `node_index=0` will correspond to the
                         first output node of the layer.

      :returns: A tensor (or list of tensors if the layer has multiple outputs).

      :raises RuntimeError: If called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: input(self)
      :property:

      
      Retrieves the input tensor(s) of a layer.

      Only applicable if the layer has exactly one input,
      i.e. if it is connected to one incoming layer.

      :returns: Input tensor or list of input tensors.

      :raises RuntimeError: If called in Eager mode.
      :raises AttributeError: If no inbound nodes are found.















      ..
          !! processed by numpydoc !!

   .. py:method:: output(self)
      :property:

      
      Retrieves the output tensor(s) of a layer.

      Only applicable if the layer has exactly one output,
      i.e. if it is connected to one incoming layer.

      :returns: Output tensor or list of output tensors.

      :raises AttributeError: if the layer is connected to more than one incoming
          layers.
      :raises RuntimeError: if called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: input_shape(self)
      :property:

      
      Retrieves the input shape(s) of a layer.

      Only applicable if the layer has exactly one input,
      i.e. if it is connected to one incoming layer, or if all inputs
      have the same shape.

      :returns: Input shape, as an integer shape tuple
                (or list of shape tuples, one tuple per input tensor).

      :raises AttributeError: if the layer has no defined input_shape.
      :raises RuntimeError: if called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: count_params(self)

      
      Count the total number of scalars composing the weights.

      :returns: An integer count.

      :raises ValueError: if the layer isn't yet built
          (in which case its weights aren't yet defined).















      ..
          !! processed by numpydoc !!

   .. py:method:: output_shape(self)
      :property:

      
      Retrieves the output shape(s) of a layer.

      Only applicable if the layer has one output,
      or if all outputs have the same shape.

      :returns: Output shape, as an integer shape tuple
                (or list of shape tuples, one tuple per output tensor).

      :raises AttributeError: if the layer has no defined output shape.
      :raises RuntimeError: if called in Eager mode.















      ..
          !! processed by numpydoc !!

   .. py:method:: inbound_nodes(self)
      :property:

      
      Deprecated, do NOT use! Only for compatibility with external Keras.
















      ..
          !! processed by numpydoc !!

   .. py:method:: outbound_nodes(self)
      :property:

      
      Deprecated, do NOT use! Only for compatibility with external Keras.
















      ..
          !! processed by numpydoc !!

   .. py:method:: apply(self, inputs, *args, **kwargs)

      
      Deprecated, do NOT use!

      This is an alias of `self.__call__`.

      :param inputs: Input tensor(s).
      :param \*args: additional positional arguments to be passed to `self.call`.
      :param \*\*kwargs: additional keyword arguments to be passed to `self.call`.

      :returns: Output tensor(s).















      ..
          !! processed by numpydoc !!

   .. py:method:: add_variable(self, *args, **kwargs)

      
      Deprecated, do NOT use! Alias for `add_weight`.
















      ..
          !! processed by numpydoc !!

   .. py:method:: variables(self)
      :property:

      
      Returns the list of all layer variables/weights.

      Alias of `self.weights`.

      Note: This will not track the weights of nested `tf.Modules` that are not
      themselves Keras layers.

      :returns: A list of variables.















      ..
          !! processed by numpydoc !!

   .. py:method:: trainable_variables(self)
      :property:

      
      Sequence of trainable variables owned by this module and its submodules.

      Note: this method uses reflection to find variables on the current instance
      and submodules. For performance reasons you may wish to cache the result
      of calling this method if you don't expect the return value to change.

      :returns: A sequence of variables for the current module (sorted by attribute
                name) followed by variables from all submodules recursively (breadth
                first).















      ..
          !! processed by numpydoc !!

   .. py:method:: non_trainable_variables(self)
      :property:

      
      Sequence of non-trainable variables owned by this module and its submodules.

      Note: this method uses reflection to find variables on the current instance
      and submodules. For performance reasons you may wish to cache the result
      of calling this method if you don't expect the return value to change.

      :returns: A sequence of variables for the current module (sorted by attribute
                name) followed by variables from all submodules recursively (breadth
                first).















      ..
          !! processed by numpydoc !!

   .. py:method:: dtype_policy(self)
      :property:

      
      The dtype policy associated with this layer.

      This is an instance of a `tf.keras.mixed_precision.Policy`.















      ..
          !! processed by numpydoc !!

   .. py:method:: compute_dtype(self)
      :property:

      
      The dtype of the layer's computations.

      This is equivalent to `Layer.dtype_policy.compute_dtype`. Unless
      mixed precision is used, this is the same as `Layer.dtype`, the dtype of
      the weights.

      Layers automatically cast their inputs to the compute dtype, which causes
      computations and the output to be in the compute dtype as well. This is done
      by the base Layer class in `Layer.__call__`, so you do not have to insert
      these casts if implementing your own layer.

      Layers often perform certain internal computations in higher precision when
      `compute_dtype` is float16 or bfloat16 for numeric stability. The output
      will still typically be float16 or bfloat16 in such cases.

      :returns: The layer's compute dtype.















      ..
          !! processed by numpydoc !!

   .. py:method:: variable_dtype(self)
      :property:

      
      Alias of `Layer.dtype`, the dtype of the weights.
















      ..
          !! processed by numpydoc !!

   .. py:method:: name_scope(self)
      :property:

      
      Returns a `tf.name_scope` instance for this class.
















      ..
          !! processed by numpydoc !!

   .. py:method:: submodules(self)
      :property:

      
      Sequence of all sub-modules.

      Submodules are modules which are properties of this module, or found as
      properties of modules which are properties of this module (and so on).

      >>> a = tf.Module()
      >>> b = tf.Module()
      >>> c = tf.Module()
      >>> a.b = b
      >>> b.c = c
      >>> list(a.submodules) == [b, c]
      True
      >>> list(b.submodules) == [c]
      True
      >>> list(c.submodules) == []
      True

      :returns: A sequence of all submodules.















      ..
          !! processed by numpydoc !!

   .. py:method:: with_name_scope(cls, method)
      :classmethod:

      
      Decorator to automatically enter the module name scope.

      >>> class MyModule(tf.Module):
      ...   @tf.Module.with_name_scope
      ...   def __call__(self, x):
      ...     if not hasattr(self, 'w'):
      ...       self.w = tf.Variable(tf.random.normal([x.shape[1], 3]))
      ...     return tf.matmul(x, self.w)

      Using the above module would produce `tf.Variable`s and `tf.Tensor`s whose
      names included the module name:

      >>> mod = MyModule()
      >>> mod(tf.ones([1, 2]))
      <tf.Tensor: shape=(1, 3), dtype=float32, numpy=..., dtype=float32)>
      >>> mod.w
      <tf.Variable 'my_module/Variable:0' shape=(2, 3) dtype=float32,
      numpy=..., dtype=float32)>

      :param method: The method to wrap.

      :returns: The original method wrapped such that it enters the module's name scope.















      ..
          !! processed by numpydoc !!


