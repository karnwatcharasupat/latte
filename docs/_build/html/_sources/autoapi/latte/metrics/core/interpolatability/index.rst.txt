:py:mod:`latte.metrics.core.interpolatability`
==============================================

.. py:module:: latte.metrics.core.interpolatability

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   latte.metrics.core.interpolatability.Smoothness
   latte.metrics.core.interpolatability.Monotonicity




.. py:class:: Smoothness(reg_dim = None, liad_mode = 'forward', max_mode = 'lehmer', ptp_mode = 'naive', reduce_mode = 'attribute', clamp = False, p = 2.0)

   Bases: :py:obj:`latte.metrics.base.LatteMetric`

   
   Helper class that provides a standard way to create an ABC using
   inheritance.
















   ..
       !! processed by numpydoc !!
   .. py:method:: update_state(self, z, a)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: compute(self)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: add_state(self, name, default)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: reset_state(self)

      
















      ..
          !! processed by numpydoc !!


.. py:class:: Monotonicity(reg_dim = None, liad_mode = 'forward', reduce_mode = 'attribute', liad_thresh = 0.001, degenerate_val = np.nan, nanmean = True)

   Bases: :py:obj:`latte.metrics.base.LatteMetric`

   
   Helper class that provides a standard way to create an ABC using
   inheritance.
















   ..
       !! processed by numpydoc !!
   .. py:method:: update_state(self, z, a)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: compute(self)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: add_state(self, name, default)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: reset_state(self)

      
















      ..
          !! processed by numpydoc !!


