:py:mod:`latte.metrics.torch.interpolatability`
===============================================

.. py:module:: latte.metrics.torch.interpolatability

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   latte.metrics.torch.interpolatability.Smoothness
   latte.metrics.torch.interpolatability.Monotonicity




.. py:class:: Smoothness(**kwargs)

   Bases: :py:obj:`latte.metrics.torch.wrapper.TorchMetricWrapper`

   
   Base class for all metrics present in the Metrics API.

   Implements ``add_state()``, ``forward()``, ``reset()`` and a few other things to
   handle distributed synchronization and per-step metric computation.

   Override ``update()`` and ``compute()`` functions to implement your own metric. Use
   ``add_state()`` to register metric state variables which keep track of state on each
   call of ``update()`` and are synchronized across processes when ``compute()`` is called.

   .. note::

      Metric state variables can either be ``torch.Tensors`` or an empty list which can we used
      to store `torch.Tensors``.

   .. note::

      Different metrics only override ``update()`` and not ``forward()``. A call to ``update()``
      is valid, but it won't return the metric value at the current step. A call to ``forward()``
      automatically calls ``update()`` and also returns the metric value at the current step.

   :param compute_on_step: Forward only calls ``update()`` and returns None if this is set to False. default: True
   :param dist_sync_on_step: Synchronize metric state across processes at each ``forward()``
                             before returning the value at the step.
   :param process_group: Specify the process group on which synchronization is called. default: None (which selects the entire world)
   :param dist_sync_fn: Callback that performs the allgather operation on the metric state. When `None`, DDP
                        will be used to perform the allgather.















   ..
       !! processed by numpydoc !!
   .. py:attribute:: is_differentiable
      :annotation: :Optional[bool]

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: higher_is_better
      :annotation: :Optional[bool]

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: dump_patches
      :annotation: :bool = False

      
      This allows better BC support for :meth:`load_state_dict`. In
      :meth:`state_dict`, the version number will be saved as in the attribute
      `_metadata` of the returned state dict, and thus pickled. `_metadata` is a
      dictionary with keys that follow the naming convention of state dict. See
      ``_load_from_state_dict`` on how to use this information in loading.

      If new parameters/buffers are added/removed from a module, this number shall
      be bumped, and the module's `_load_from_state_dict` method can compare the
      version number and do appropriate changes if the state dict is from before
      the change.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: training
      :annotation: :bool

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: T_destination
      

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, z, a)

      
      Override this method to update the state variables of your metric class.
















      ..
          !! processed by numpydoc !!

   .. py:method:: compute(self)

      
      Override this method to compute the final metric value from state variables synchronized across the
      distributed backend.
















      ..
          !! processed by numpydoc !!

   .. py:method:: reset(self)

      
      This method automatically resets the metric state variables to their default value.
















      ..
          !! processed by numpydoc !!

   .. py:method:: add_state(self, name, default, dist_reduce_fx = None, persistent = False)

      
      Adds metric state variable. Only used by subclasses.

      :param name: The name of the state variable. The variable will then be accessible at ``self.name``.
      :param default: Default value of the state; can either be a ``torch.Tensor`` or an empty list. The state will be
                      reset to this value when ``self.reset()`` is called.
      :param dist_reduce_fx: Function to reduce state across multiple processes in distributed mode.
                             If value is ``"sum"``, ``"mean"``, ``"cat"``, ``"min"`` or ``"max"`` we will use ``torch.sum``,
                             ``torch.mean``, ``torch.cat``, ``torch.min`` and ``torch.max``` respectively, each with argument
                             ``dim=0``. Note that the ``"cat"`` reduction only makes sense if the state is a list, and not
                             a tensor. The user can also pass a custom function in this parameter.
      :type dist_reduce_fx: Optional
      :param persistent: whether the state will be saved as part of the modules ``state_dict``.
                         Default is ``False``.
      :type persistent: Optional

      .. note::

         Setting ``dist_reduce_fx`` to None will return the metric state synchronized across different processes.
         However, there won't be any reduction function applied to the synchronized metric state.

         The metric states would be synced as follows

         - If the metric state is ``torch.Tensor``, the synced value will be a stacked ``torch.Tensor`` across
           the process dimension if the metric state was a ``torch.Tensor``. The original ``torch.Tensor`` metric
           state retains dimension and hence the synchronized output will be of shape ``(num_process, ...)``.

         - If the metric state is a ``list``, the synced value will be a ``list`` containing the
           combined elements from all processes.

      .. note::

         When passing a custom function to ``dist_reduce_fx``, expect the synchronized metric state to follow
         the format discussed in the above note.

      :raises ValueError: If ``default`` is not a ``tensor`` or an ``empty list``.
      :raises ValueError: If ``dist_reduce_fx`` is not callable or one of ``"mean"``, ``"sum"``, ``"cat"``, ``None``.















      ..
          !! processed by numpydoc !!

   .. py:method:: forward(self, *args, **kwargs)

      
      Automatically calls ``update()``.

      Returns the metric value over inputs if ``compute_on_step`` is True.















      ..
          !! processed by numpydoc !!

   .. py:method:: sync(self, dist_sync_fn = None, process_group = None, should_sync = True, distributed_available = jit_distributed_available)

      
      Sync function for manually controlling when metrics states should be synced across processes.

      :param dist_sync_fn: Function to be used to perform states synchronization
      :param process_group: Specify the process group on which synchronization is called.
                            default: None (which selects the entire world)
      :param should_sync: Whether to apply to state synchronization. This will have an impact
                          only when running in a distributed setting.
      :param distributed_available: Function to determine if we are running inside a distributed setting















      ..
          !! processed by numpydoc !!

   .. py:method:: unsync(self, should_unsync = True)

      
      Unsync function for manually controlling when metrics states should be reverted back to their local
      states.

      :param should_unsync: Whether to perform unsync















      ..
          !! processed by numpydoc !!

   .. py:method:: sync_context(self, dist_sync_fn = None, process_group = None, should_sync = True, should_unsync = True, distributed_available = jit_distributed_available)

      
      Context manager to synchronize the states between processes when running in a distributed setting and
      restore the local cache states after yielding.

      :param dist_sync_fn: Function to be used to perform states synchronization
      :param process_group: Specify the process group on which synchronization is called.
                            default: None (which selects the entire world)
      :param should_sync: Whether to apply to state synchronization. This will have an impact
                          only when running in a distributed setting.
      :param should_unsync: Whether to restore the cache state so that the metrics can
                            continue to be accumulated.
      :param distributed_available: Function to determine if we are running inside a distributed setting















      ..
          !! processed by numpydoc !!

   .. py:method:: clone(self)

      
      Make a copy of the metric.
















      ..
          !! processed by numpydoc !!

   .. py:method:: device(self)
      :property:

      
      Return the device of the metric.
















      ..
          !! processed by numpydoc !!

   .. py:method:: type(self, dst_type)

      
      Method override default and prevent dtype casting.

      Please use `metric.set_dtype(dtype)` instead.















      ..
          !! processed by numpydoc !!

   .. py:method:: float(self)

      
      Method override default and prevent dtype casting.

      Please use `metric.set_dtype(dtype)` instead.















      ..
          !! processed by numpydoc !!

   .. py:method:: double(self)

      
      Method override default and prevent dtype casting.

      Please use `metric.set_dtype(dtype)` instead.















      ..
          !! processed by numpydoc !!

   .. py:method:: half(self)

      
      Method override default and prevent dtype casting.

      Please use `metric.set_dtype(dtype)` instead.















      ..
          !! processed by numpydoc !!

   .. py:method:: set_dtype(self, dst_type)

      
      Special version of `type` for transferring all metric states to specific dtype
      :param dst_type: the desired type
      :type dst_type: type or string
















      ..
          !! processed by numpydoc !!

   .. py:method:: persistent(self, mode = False)

      
      Method for post-init to change if metric states should be saved to its state_dict.
















      ..
          !! processed by numpydoc !!

   .. py:method:: state_dict(self, destination = None, prefix = '', keep_vars = False)

      
      Returns a dictionary containing a whole state of the module.

      Both parameters and persistent buffers (e.g. running averages) are
      included. Keys are corresponding parameter and buffer names.
      Parameters and buffers set to ``None`` are not included.

      :returns:     a dictionary containing a whole state of the module
      :rtype: dict

      Example::

          >>> module.state_dict().keys()
          ['bias', 'weight']















      ..
          !! processed by numpydoc !!

   .. py:method:: register_buffer(self, name, tensor, persistent = True)

      
      Adds a buffer to the module.

      This is typically used to register a buffer that should not to be
      considered a model parameter. For example, BatchNorm's ``running_mean``
      is not a parameter, but is part of the module's state. Buffers, by
      default, are persistent and will be saved alongside parameters. This
      behavior can be changed by setting :attr:`persistent` to ``False``. The
      only difference between a persistent buffer and a non-persistent buffer
      is that the latter will not be a part of this module's
      :attr:`state_dict`.

      Buffers can be accessed as attributes using given names.

      :param name: name of the buffer. The buffer can be accessed
                   from this module using the given name
      :type name: string
      :param tensor: buffer to be registered. If ``None``, then operations
                     that run on buffers, such as :attr:`cuda`, are ignored. If ``None``,
                     the buffer is **not** included in the module's :attr:`state_dict`.
      :type tensor: Tensor or None
      :param persistent: whether the buffer is part of this module's
                         :attr:`state_dict`.
      :type persistent: bool

      Example::

          >>> self.register_buffer('running_mean', torch.zeros(num_features))















      ..
          !! processed by numpydoc !!

   .. py:method:: register_parameter(self, name, param)

      
      Adds a parameter to the module.

      The parameter can be accessed as an attribute using given name.

      :param name: name of the parameter. The parameter can be accessed
                   from this module using the given name
      :type name: string
      :param param: parameter to be added to the module. If
                    ``None``, then operations that run on parameters, such as :attr:`cuda`,
                    are ignored. If ``None``, the parameter is **not** included in the
                    module's :attr:`state_dict`.
      :type param: Parameter or None















      ..
          !! processed by numpydoc !!

   .. py:method:: add_module(self, name, module)

      
      Adds a child module to the current module.

      The module can be accessed as an attribute using the given name.

      :param name: name of the child module. The child module can be
                   accessed from this module using the given name
      :type name: string
      :param module: child module to be added to the module.
      :type module: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: get_submodule(self, target)

      
      Returns the submodule given by ``target`` if it exists,
      otherwise throws an error.

      For example, let's say you have an ``nn.Module`` ``A`` that
      looks like this:

      .. code-block::text

          A(
              (net_b): Module(
                  (net_c): Module(
                      (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2))
                  )
                  (linear): Linear(in_features=100, out_features=200, bias=True)
              )
          )

      (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested
      submodule ``net_b``, which itself has two submodules ``net_c``
      and ``linear``. ``net_c`` then has a submodule ``conv``.)

      To check whether or not we have the ``linear`` submodule, we
      would call ``get_submodule("net_b.linear")``. To check whether
      we have the ``conv`` submodule, we would call
      ``get_submodule("net_b.net_c.conv")``.

      The runtime of ``get_submodule`` is bounded by the degree
      of module nesting in ``target``. A query against
      ``named_modules`` achieves the same result, but it is O(N) in
      the number of transitive modules. So, for a simple check to see
      if some submodule exists, ``get_submodule`` should always be
      used.

      :param target: The fully-qualified string name of the submodule
                     to look for. (See above example for how to specify a
                     fully-qualified string.)

      :returns: The submodule referenced by ``target``
      :rtype: torch.nn.Module

      :raises AttributeError: If the target string references an invalid
          path or resolves to something that is not an
          ``nn.Module``















      ..
          !! processed by numpydoc !!

   .. py:method:: get_parameter(self, target)

      
      Returns the parameter given by ``target`` if it exists,
      otherwise throws an error.

      See the docstring for ``get_submodule`` for a more detailed
      explanation of this method's functionality as well as how to
      correctly specify ``target``.

      :param target: The fully-qualified string name of the Parameter
                     to look for. (See ``get_submodule`` for how to specify a
                     fully-qualified string.)

      :returns: The Parameter referenced by ``target``
      :rtype: torch.nn.Parameter

      :raises AttributeError: If the target string references an invalid
          path or resolves to something that is not an
          ``nn.Parameter``















      ..
          !! processed by numpydoc !!

   .. py:method:: get_buffer(self, target)

      
      Returns the buffer given by ``target`` if it exists,
      otherwise throws an error.

      See the docstring for ``get_submodule`` for a more detailed
      explanation of this method's functionality as well as how to
      correctly specify ``target``.

      :param target: The fully-qualified string name of the buffer
                     to look for. (See ``get_submodule`` for how to specify a
                     fully-qualified string.)

      :returns: The buffer referenced by ``target``
      :rtype: torch.Tensor

      :raises AttributeError: If the target string references an invalid
          path or resolves to something that is not a
          buffer















      ..
          !! processed by numpydoc !!

   .. py:method:: get_extra_state(self)

      
      Returns any extra state to include in the module's state_dict.
      Implement this and a corresponding :func:`set_extra_state` for your module
      if you need to store extra state. This function is called when building the
      module's `state_dict()`.

      Note that extra state should be pickleable to ensure working serialization
      of the state_dict. We only provide provide backwards compatibility guarantees
      for serializing Tensors; other objects may break backwards compatibility if
      their serialized pickled form changes.

      :returns: Any extra state to store in the module's state_dict
      :rtype: object















      ..
          !! processed by numpydoc !!

   .. py:method:: set_extra_state(self, state)

      
      This function is called from :func:`load_state_dict` to handle any extra state
      found within the `state_dict`. Implement this function and a corresponding
      :func:`get_extra_state` for your module if you need to store extra state within its
      `state_dict`.

      :param state: Extra state from the `state_dict`
      :type state: dict















      ..
          !! processed by numpydoc !!

   .. py:method:: apply(self, fn)

      
      Applies ``fn`` recursively to every submodule (as returned by ``.children()``)
      as well as self. Typical use includes initializing the parameters of a model
      (see also :ref:`nn-init-doc`).

      :param fn: function to be applied to each submodule
      :type fn: :class:`Module` -> None

      :returns: self
      :rtype: Module

      Example::

          >>> @torch.no_grad()
          >>> def init_weights(m):
          >>>     print(m)
          >>>     if type(m) == nn.Linear:
          >>>         m.weight.fill_(1.0)
          >>>         print(m.weight)
          >>> net = nn.Sequential(nn.Linear(2, 2), nn.Linear(2, 2))
          >>> net.apply(init_weights)
          Linear(in_features=2, out_features=2, bias=True)
          Parameter containing:
          tensor([[ 1.,  1.],
                  [ 1.,  1.]])
          Linear(in_features=2, out_features=2, bias=True)
          Parameter containing:
          tensor([[ 1.,  1.],
                  [ 1.,  1.]])
          Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )
          Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )















      ..
          !! processed by numpydoc !!

   .. py:method:: cuda(self, device = None)

      
      Moves all model parameters and buffers to the GPU.

      This also makes associated parameters and buffers different objects. So
      it should be called before constructing optimizer if the module will
      live on GPU while being optimized.

      .. note::
          This method modifies the module in-place.

      :param device: if specified, all parameters will be
                     copied to that device
      :type device: int, optional

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: xpu(self, device = None)

      
      Moves all model parameters and buffers to the XPU.

      This also makes associated parameters and buffers different objects. So
      it should be called before constructing optimizer if the module will
      live on XPU while being optimized.

      .. note::
          This method modifies the module in-place.

      :param device: if specified, all parameters will be
                     copied to that device
      :type device: int, optional

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: cpu(self)

      
      Moves all model parameters and buffers to the CPU.

      .. note::
          This method modifies the module in-place.

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: bfloat16(self)

      
      Casts all floating point parameters and buffers to ``bfloat16`` datatype.

      .. note::
          This method modifies the module in-place.

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: to_empty(self, *, device)

      
      Moves the parameters and buffers to the specified device without copying storage.

      :param device: The desired device of the parameters
                     and buffers in this module.
      :type device: :class:`torch.device`

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: to(self: T, device: Optional[Union[int, Module.to.device]] = ..., dtype: Optional[Union[Module.to.dtype, str]] = ..., non_blocking: bool = ...) -> T
               to(self: T, dtype: Union[Module.to.dtype, str], non_blocking: bool = ...) -> T
               to(self: T, tensor: torch.Tensor, non_blocking: bool = ...) -> T

      
      Moves and/or casts the parameters and buffers.

      This can be called as

      .. function:: to(device=None, dtype=None, non_blocking=False)
         :noindex:

      .. function:: to(dtype, non_blocking=False)
         :noindex:

      .. function:: to(tensor, non_blocking=False)
         :noindex:

      .. function:: to(memory_format=torch.channels_last)
         :noindex:

      Its signature is similar to :meth:`torch.Tensor.to`, but only accepts
      floating point or complex :attr:`dtype`\ s. In addition, this method will
      only cast the floating point or complex parameters and buffers to :attr:`dtype`
      (if given). The integral parameters and buffers will be moved
      :attr:`device`, if that is given, but with dtypes unchanged. When
      :attr:`non_blocking` is set, it tries to convert/move asynchronously
      with respect to the host if possible, e.g., moving CPU Tensors with
      pinned memory to CUDA devices.

      See below for examples.

      .. note::
          This method modifies the module in-place.

      :param device: the desired device of the parameters
                     and buffers in this module
      :type device: :class:`torch.device`
      :param dtype: the desired floating point or complex dtype of
                    the parameters and buffers in this module
      :type dtype: :class:`torch.dtype`
      :param tensor: Tensor whose dtype and device are the desired
                     dtype and device for all parameters and buffers in this module
      :type tensor: torch.Tensor
      :param memory_format: the desired memory
                            format for 4D parameters and buffers in this module (keyword
                            only argument)
      :type memory_format: :class:`torch.memory_format`

      :returns: self
      :rtype: Module

      Examples::

          >>> linear = nn.Linear(2, 2)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1913, -0.3420],
                  [-0.5113, -0.2325]])
          >>> linear.to(torch.double)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1913, -0.3420],
                  [-0.5113, -0.2325]], dtype=torch.float64)
          >>> gpu1 = torch.device("cuda:1")
          >>> linear.to(gpu1, dtype=torch.half, non_blocking=True)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1914, -0.3420],
                  [-0.5112, -0.2324]], dtype=torch.float16, device='cuda:1')
          >>> cpu = torch.device("cpu")
          >>> linear.to(cpu)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1914, -0.3420],
                  [-0.5112, -0.2324]], dtype=torch.float16)

          >>> linear = nn.Linear(2, 2, bias=None).to(torch.cdouble)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.3741+0.j,  0.2382+0.j],
                  [ 0.5593+0.j, -0.4443+0.j]], dtype=torch.complex128)
          >>> linear(torch.ones(3, 2, dtype=torch.cdouble))
          tensor([[0.6122+0.j, 0.1150+0.j],
                  [0.6122+0.j, 0.1150+0.j],
                  [0.6122+0.j, 0.1150+0.j]], dtype=torch.complex128)















      ..
          !! processed by numpydoc !!

   .. py:method:: register_backward_hook(self, hook)

      
      Registers a backward hook on the module.

      This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
      the behavior of this function will change in future versions.

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`















      ..
          !! processed by numpydoc !!

   .. py:method:: register_full_backward_hook(self, hook)

      
      Registers a backward hook on the module.

      The hook will be called every time the gradients with respect to module
      inputs are computed. The hook should have the following signature::

          hook(module, grad_input, grad_output) -> tuple(Tensor) or None

      The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients
      with respect to the inputs and outputs respectively. The hook should
      not modify its arguments, but it can optionally return a new gradient with
      respect to the input that will be used in place of :attr:`grad_input` in
      subsequent computations. :attr:`grad_input` will only correspond to the inputs given
      as positional arguments and all kwarg arguments are ignored. Entries
      in :attr:`grad_input` and :attr:`grad_output` will be ``None`` for all non-Tensor
      arguments.

      For technical reasons, when this hook is applied to a Module, its forward function will
      receive a view of each Tensor passed to the Module. Similarly the caller will receive a view
      of each Tensor returned by the Module's forward function.

      .. warning ::
          Modifying inputs or outputs inplace is not allowed when using backward hooks and
          will raise an error.

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`















      ..
          !! processed by numpydoc !!

   .. py:method:: register_forward_pre_hook(self, hook)

      
      Registers a forward pre-hook on the module.

      The hook will be called every time before :func:`forward` is invoked.
      It should have the following signature::

          hook(module, input) -> None or modified input

      The input contains only the positional arguments given to the module.
      Keyword arguments won't be passed to the hooks and only to the ``forward``.
      The hook can modify the input. User can either return a tuple or a
      single modified value in the hook. We will wrap the value into a tuple
      if a single value is returned(unless that value is already a tuple).

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`















      ..
          !! processed by numpydoc !!

   .. py:method:: register_forward_hook(self, hook)

      
      Registers a forward hook on the module.

      The hook will be called every time after :func:`forward` has computed an output.
      It should have the following signature::

          hook(module, input, output) -> None or modified output

      The input contains only the positional arguments given to the module.
      Keyword arguments won't be passed to the hooks and only to the ``forward``.
      The hook can modify the output. It can modify the input inplace but
      it will not have effect on forward since this is called after
      :func:`forward` is called.

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`















      ..
          !! processed by numpydoc !!

   .. py:method:: load_state_dict(self, state_dict, strict = True)

      
      Copies parameters and buffers from :attr:`state_dict` into
      this module and its descendants. If :attr:`strict` is ``True``, then
      the keys of :attr:`state_dict` must exactly match the keys returned
      by this module's :meth:`~torch.nn.Module.state_dict` function.

      :param state_dict: a dict containing parameters and
                         persistent buffers.
      :type state_dict: dict
      :param strict: whether to strictly enforce that the keys
                     in :attr:`state_dict` match the keys returned by this module's
                     :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
      :type strict: bool, optional

      :returns:     * **missing_keys** is a list of str containing the missing keys
                    * **unexpected_keys** is a list of str containing the unexpected keys
      :rtype: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields

      .. note::

         If a parameter or buffer is registered as ``None`` and its corresponding key
         exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
         ``RuntimeError``.















      ..
          !! processed by numpydoc !!

   .. py:method:: parameters(self, recurse = True)

      
      Returns an iterator over module parameters.

      This is typically passed to an optimizer.

      :param recurse: if True, then yields parameters of this module
                      and all submodules. Otherwise, yields only parameters that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *Parameter* -- module parameter

      Example::

          >>> for param in model.parameters():
          >>>     print(type(param), param.size())
          <class 'torch.Tensor'> (20L,)
          <class 'torch.Tensor'> (20L, 1L, 5L, 5L)















      ..
          !! processed by numpydoc !!

   .. py:method:: named_parameters(self, prefix = '', recurse = True)

      
      Returns an iterator over module parameters, yielding both the
      name of the parameter as well as the parameter itself.

      :param prefix: prefix to prepend to all parameter names.
      :type prefix: str
      :param recurse: if True, then yields parameters of this module
                      and all submodules. Otherwise, yields only parameters that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *(string, Parameter)* -- Tuple containing the name and parameter

      Example::

          >>> for name, param in self.named_parameters():
          >>>    if name in ['bias']:
          >>>        print(param.size())















      ..
          !! processed by numpydoc !!

   .. py:method:: buffers(self, recurse = True)

      
      Returns an iterator over module buffers.

      :param recurse: if True, then yields buffers of this module
                      and all submodules. Otherwise, yields only buffers that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *torch.Tensor* -- module buffer

      Example::

          >>> for buf in model.buffers():
          >>>     print(type(buf), buf.size())
          <class 'torch.Tensor'> (20L,)
          <class 'torch.Tensor'> (20L, 1L, 5L, 5L)















      ..
          !! processed by numpydoc !!

   .. py:method:: named_buffers(self, prefix = '', recurse = True)

      
      Returns an iterator over module buffers, yielding both the
      name of the buffer as well as the buffer itself.

      :param prefix: prefix to prepend to all buffer names.
      :type prefix: str
      :param recurse: if True, then yields buffers of this module
                      and all submodules. Otherwise, yields only buffers that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *(string, torch.Tensor)* -- Tuple containing the name and buffer

      Example::

          >>> for name, buf in self.named_buffers():
          >>>    if name in ['running_var']:
          >>>        print(buf.size())















      ..
          !! processed by numpydoc !!

   .. py:method:: children(self)

      
      Returns an iterator over immediate children modules.

      :Yields: *Module* -- a child module















      ..
          !! processed by numpydoc !!

   .. py:method:: named_children(self)

      
      Returns an iterator over immediate children modules, yielding both
      the name of the module as well as the module itself.

      :Yields: *(string, Module)* -- Tuple containing a name and child module

      Example::

          >>> for name, module in model.named_children():
          >>>     if name in ['conv4', 'conv5']:
          >>>         print(module)















      ..
          !! processed by numpydoc !!

   .. py:method:: modules(self)

      
      Returns an iterator over all modules in the network.

      :Yields: *Module* -- a module in the network

      .. note::

         Duplicate modules are returned only once. In the following
         example, ``l`` will be returned only once.

      Example::

          >>> l = nn.Linear(2, 2)
          >>> net = nn.Sequential(l, l)
          >>> for idx, m in enumerate(net.modules()):
                  print(idx, '->', m)

          0 -> Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )
          1 -> Linear(in_features=2, out_features=2, bias=True)















      ..
          !! processed by numpydoc !!

   .. py:method:: named_modules(self, memo = None, prefix = '', remove_duplicate = True)

      
      Returns an iterator over all modules in the network, yielding
      both the name of the module as well as the module itself.

      :param memo: a memo to store the set of modules already added to the result
      :param prefix: a prefix that will be added to the name of the module
      :param remove_duplicate: whether to remove the duplicated module instances in the result
      :param or not:

      :Yields: *(string, Module)* -- Tuple of name and module

      .. note::

         Duplicate modules are returned only once. In the following
         example, ``l`` will be returned only once.

      Example::

          >>> l = nn.Linear(2, 2)
          >>> net = nn.Sequential(l, l)
          >>> for idx, m in enumerate(net.named_modules()):
                  print(idx, '->', m)

          0 -> ('', Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          ))
          1 -> ('0', Linear(in_features=2, out_features=2, bias=True))















      ..
          !! processed by numpydoc !!

   .. py:method:: train(self, mode = True)

      
      Sets the module in training mode.

      This has any effect only on certain modules. See documentations of
      particular modules for details of their behaviors in training/evaluation
      mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,
      etc.

      :param mode: whether to set training mode (``True``) or evaluation
                   mode (``False``). Default: ``True``.
      :type mode: bool

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: eval(self)

      
      Sets the module in evaluation mode.

      This has any effect only on certain modules. See documentations of
      particular modules for details of their behaviors in training/evaluation
      mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,
      etc.

      This is equivalent with :meth:`self.train(False) <torch.nn.Module.train>`.

      See :ref:`locally-disable-grad-doc` for a comparison between
      `.eval()` and several similar mechanisms that may be confused with it.

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: requires_grad_(self, requires_grad = True)

      
      Change if autograd should record operations on parameters in this
      module.

      This method sets the parameters' :attr:`requires_grad` attributes
      in-place.

      This method is helpful for freezing part of the module for finetuning
      or training parts of a model individually (e.g., GAN training).

      See :ref:`locally-disable-grad-doc` for a comparison between
      `.requires_grad_()` and several similar mechanisms that may be confused with it.

      :param requires_grad: whether autograd should record operations on
                            parameters in this module. Default: ``True``.
      :type requires_grad: bool

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: zero_grad(self, set_to_none = False)

      
      Sets gradients of all model parameters to zero. See similar function
      under :class:`torch.optim.Optimizer` for more context.

      :param set_to_none: instead of setting to zero, set the grads to None.
                          See :meth:`torch.optim.Optimizer.zero_grad` for details.
      :type set_to_none: bool















      ..
          !! processed by numpydoc !!

   .. py:method:: share_memory(self)

      
      See :meth:`torch.Tensor.share_memory_`
















      ..
          !! processed by numpydoc !!

   .. py:method:: extra_repr(self)

      
      Set the extra representation of the module

      To print customized extra information, you should re-implement
      this method in your own modules. Both single-line and multi-line
      strings are acceptable.















      ..
          !! processed by numpydoc !!


.. py:class:: Monotonicity(**kwargs)

   Bases: :py:obj:`latte.metrics.torch.wrapper.TorchMetricWrapper`

   
   Base class for all metrics present in the Metrics API.

   Implements ``add_state()``, ``forward()``, ``reset()`` and a few other things to
   handle distributed synchronization and per-step metric computation.

   Override ``update()`` and ``compute()`` functions to implement your own metric. Use
   ``add_state()`` to register metric state variables which keep track of state on each
   call of ``update()`` and are synchronized across processes when ``compute()`` is called.

   .. note::

      Metric state variables can either be ``torch.Tensors`` or an empty list which can we used
      to store `torch.Tensors``.

   .. note::

      Different metrics only override ``update()`` and not ``forward()``. A call to ``update()``
      is valid, but it won't return the metric value at the current step. A call to ``forward()``
      automatically calls ``update()`` and also returns the metric value at the current step.

   :param compute_on_step: Forward only calls ``update()`` and returns None if this is set to False. default: True
   :param dist_sync_on_step: Synchronize metric state across processes at each ``forward()``
                             before returning the value at the step.
   :param process_group: Specify the process group on which synchronization is called. default: None (which selects the entire world)
   :param dist_sync_fn: Callback that performs the allgather operation on the metric state. When `None`, DDP
                        will be used to perform the allgather.















   ..
       !! processed by numpydoc !!
   .. py:attribute:: is_differentiable
      :annotation: :Optional[bool]

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: higher_is_better
      :annotation: :Optional[bool]

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: dump_patches
      :annotation: :bool = False

      
      This allows better BC support for :meth:`load_state_dict`. In
      :meth:`state_dict`, the version number will be saved as in the attribute
      `_metadata` of the returned state dict, and thus pickled. `_metadata` is a
      dictionary with keys that follow the naming convention of state dict. See
      ``_load_from_state_dict`` on how to use this information in loading.

      If new parameters/buffers are added/removed from a module, this number shall
      be bumped, and the module's `_load_from_state_dict` method can compare the
      version number and do appropriate changes if the state dict is from before
      the change.















      ..
          !! processed by numpydoc !!

   .. py:attribute:: training
      :annotation: :bool

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: T_destination
      

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: update(self, z, a)

      
      Override this method to update the state variables of your metric class.
















      ..
          !! processed by numpydoc !!

   .. py:method:: compute(self)

      
      Override this method to compute the final metric value from state variables synchronized across the
      distributed backend.
















      ..
          !! processed by numpydoc !!

   .. py:method:: reset(self)

      
      This method automatically resets the metric state variables to their default value.
















      ..
          !! processed by numpydoc !!

   .. py:method:: add_state(self, name, default, dist_reduce_fx = None, persistent = False)

      
      Adds metric state variable. Only used by subclasses.

      :param name: The name of the state variable. The variable will then be accessible at ``self.name``.
      :param default: Default value of the state; can either be a ``torch.Tensor`` or an empty list. The state will be
                      reset to this value when ``self.reset()`` is called.
      :param dist_reduce_fx: Function to reduce state across multiple processes in distributed mode.
                             If value is ``"sum"``, ``"mean"``, ``"cat"``, ``"min"`` or ``"max"`` we will use ``torch.sum``,
                             ``torch.mean``, ``torch.cat``, ``torch.min`` and ``torch.max``` respectively, each with argument
                             ``dim=0``. Note that the ``"cat"`` reduction only makes sense if the state is a list, and not
                             a tensor. The user can also pass a custom function in this parameter.
      :type dist_reduce_fx: Optional
      :param persistent: whether the state will be saved as part of the modules ``state_dict``.
                         Default is ``False``.
      :type persistent: Optional

      .. note::

         Setting ``dist_reduce_fx`` to None will return the metric state synchronized across different processes.
         However, there won't be any reduction function applied to the synchronized metric state.

         The metric states would be synced as follows

         - If the metric state is ``torch.Tensor``, the synced value will be a stacked ``torch.Tensor`` across
           the process dimension if the metric state was a ``torch.Tensor``. The original ``torch.Tensor`` metric
           state retains dimension and hence the synchronized output will be of shape ``(num_process, ...)``.

         - If the metric state is a ``list``, the synced value will be a ``list`` containing the
           combined elements from all processes.

      .. note::

         When passing a custom function to ``dist_reduce_fx``, expect the synchronized metric state to follow
         the format discussed in the above note.

      :raises ValueError: If ``default`` is not a ``tensor`` or an ``empty list``.
      :raises ValueError: If ``dist_reduce_fx`` is not callable or one of ``"mean"``, ``"sum"``, ``"cat"``, ``None``.















      ..
          !! processed by numpydoc !!

   .. py:method:: forward(self, *args, **kwargs)

      
      Automatically calls ``update()``.

      Returns the metric value over inputs if ``compute_on_step`` is True.















      ..
          !! processed by numpydoc !!

   .. py:method:: sync(self, dist_sync_fn = None, process_group = None, should_sync = True, distributed_available = jit_distributed_available)

      
      Sync function for manually controlling when metrics states should be synced across processes.

      :param dist_sync_fn: Function to be used to perform states synchronization
      :param process_group: Specify the process group on which synchronization is called.
                            default: None (which selects the entire world)
      :param should_sync: Whether to apply to state synchronization. This will have an impact
                          only when running in a distributed setting.
      :param distributed_available: Function to determine if we are running inside a distributed setting















      ..
          !! processed by numpydoc !!

   .. py:method:: unsync(self, should_unsync = True)

      
      Unsync function for manually controlling when metrics states should be reverted back to their local
      states.

      :param should_unsync: Whether to perform unsync















      ..
          !! processed by numpydoc !!

   .. py:method:: sync_context(self, dist_sync_fn = None, process_group = None, should_sync = True, should_unsync = True, distributed_available = jit_distributed_available)

      
      Context manager to synchronize the states between processes when running in a distributed setting and
      restore the local cache states after yielding.

      :param dist_sync_fn: Function to be used to perform states synchronization
      :param process_group: Specify the process group on which synchronization is called.
                            default: None (which selects the entire world)
      :param should_sync: Whether to apply to state synchronization. This will have an impact
                          only when running in a distributed setting.
      :param should_unsync: Whether to restore the cache state so that the metrics can
                            continue to be accumulated.
      :param distributed_available: Function to determine if we are running inside a distributed setting















      ..
          !! processed by numpydoc !!

   .. py:method:: clone(self)

      
      Make a copy of the metric.
















      ..
          !! processed by numpydoc !!

   .. py:method:: device(self)
      :property:

      
      Return the device of the metric.
















      ..
          !! processed by numpydoc !!

   .. py:method:: type(self, dst_type)

      
      Method override default and prevent dtype casting.

      Please use `metric.set_dtype(dtype)` instead.















      ..
          !! processed by numpydoc !!

   .. py:method:: float(self)

      
      Method override default and prevent dtype casting.

      Please use `metric.set_dtype(dtype)` instead.















      ..
          !! processed by numpydoc !!

   .. py:method:: double(self)

      
      Method override default and prevent dtype casting.

      Please use `metric.set_dtype(dtype)` instead.















      ..
          !! processed by numpydoc !!

   .. py:method:: half(self)

      
      Method override default and prevent dtype casting.

      Please use `metric.set_dtype(dtype)` instead.















      ..
          !! processed by numpydoc !!

   .. py:method:: set_dtype(self, dst_type)

      
      Special version of `type` for transferring all metric states to specific dtype
      :param dst_type: the desired type
      :type dst_type: type or string
















      ..
          !! processed by numpydoc !!

   .. py:method:: persistent(self, mode = False)

      
      Method for post-init to change if metric states should be saved to its state_dict.
















      ..
          !! processed by numpydoc !!

   .. py:method:: state_dict(self, destination = None, prefix = '', keep_vars = False)

      
      Returns a dictionary containing a whole state of the module.

      Both parameters and persistent buffers (e.g. running averages) are
      included. Keys are corresponding parameter and buffer names.
      Parameters and buffers set to ``None`` are not included.

      :returns:     a dictionary containing a whole state of the module
      :rtype: dict

      Example::

          >>> module.state_dict().keys()
          ['bias', 'weight']















      ..
          !! processed by numpydoc !!

   .. py:method:: register_buffer(self, name, tensor, persistent = True)

      
      Adds a buffer to the module.

      This is typically used to register a buffer that should not to be
      considered a model parameter. For example, BatchNorm's ``running_mean``
      is not a parameter, but is part of the module's state. Buffers, by
      default, are persistent and will be saved alongside parameters. This
      behavior can be changed by setting :attr:`persistent` to ``False``. The
      only difference between a persistent buffer and a non-persistent buffer
      is that the latter will not be a part of this module's
      :attr:`state_dict`.

      Buffers can be accessed as attributes using given names.

      :param name: name of the buffer. The buffer can be accessed
                   from this module using the given name
      :type name: string
      :param tensor: buffer to be registered. If ``None``, then operations
                     that run on buffers, such as :attr:`cuda`, are ignored. If ``None``,
                     the buffer is **not** included in the module's :attr:`state_dict`.
      :type tensor: Tensor or None
      :param persistent: whether the buffer is part of this module's
                         :attr:`state_dict`.
      :type persistent: bool

      Example::

          >>> self.register_buffer('running_mean', torch.zeros(num_features))















      ..
          !! processed by numpydoc !!

   .. py:method:: register_parameter(self, name, param)

      
      Adds a parameter to the module.

      The parameter can be accessed as an attribute using given name.

      :param name: name of the parameter. The parameter can be accessed
                   from this module using the given name
      :type name: string
      :param param: parameter to be added to the module. If
                    ``None``, then operations that run on parameters, such as :attr:`cuda`,
                    are ignored. If ``None``, the parameter is **not** included in the
                    module's :attr:`state_dict`.
      :type param: Parameter or None















      ..
          !! processed by numpydoc !!

   .. py:method:: add_module(self, name, module)

      
      Adds a child module to the current module.

      The module can be accessed as an attribute using the given name.

      :param name: name of the child module. The child module can be
                   accessed from this module using the given name
      :type name: string
      :param module: child module to be added to the module.
      :type module: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: get_submodule(self, target)

      
      Returns the submodule given by ``target`` if it exists,
      otherwise throws an error.

      For example, let's say you have an ``nn.Module`` ``A`` that
      looks like this:

      .. code-block::text

          A(
              (net_b): Module(
                  (net_c): Module(
                      (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2))
                  )
                  (linear): Linear(in_features=100, out_features=200, bias=True)
              )
          )

      (The diagram shows an ``nn.Module`` ``A``. ``A`` has a nested
      submodule ``net_b``, which itself has two submodules ``net_c``
      and ``linear``. ``net_c`` then has a submodule ``conv``.)

      To check whether or not we have the ``linear`` submodule, we
      would call ``get_submodule("net_b.linear")``. To check whether
      we have the ``conv`` submodule, we would call
      ``get_submodule("net_b.net_c.conv")``.

      The runtime of ``get_submodule`` is bounded by the degree
      of module nesting in ``target``. A query against
      ``named_modules`` achieves the same result, but it is O(N) in
      the number of transitive modules. So, for a simple check to see
      if some submodule exists, ``get_submodule`` should always be
      used.

      :param target: The fully-qualified string name of the submodule
                     to look for. (See above example for how to specify a
                     fully-qualified string.)

      :returns: The submodule referenced by ``target``
      :rtype: torch.nn.Module

      :raises AttributeError: If the target string references an invalid
          path or resolves to something that is not an
          ``nn.Module``















      ..
          !! processed by numpydoc !!

   .. py:method:: get_parameter(self, target)

      
      Returns the parameter given by ``target`` if it exists,
      otherwise throws an error.

      See the docstring for ``get_submodule`` for a more detailed
      explanation of this method's functionality as well as how to
      correctly specify ``target``.

      :param target: The fully-qualified string name of the Parameter
                     to look for. (See ``get_submodule`` for how to specify a
                     fully-qualified string.)

      :returns: The Parameter referenced by ``target``
      :rtype: torch.nn.Parameter

      :raises AttributeError: If the target string references an invalid
          path or resolves to something that is not an
          ``nn.Parameter``















      ..
          !! processed by numpydoc !!

   .. py:method:: get_buffer(self, target)

      
      Returns the buffer given by ``target`` if it exists,
      otherwise throws an error.

      See the docstring for ``get_submodule`` for a more detailed
      explanation of this method's functionality as well as how to
      correctly specify ``target``.

      :param target: The fully-qualified string name of the buffer
                     to look for. (See ``get_submodule`` for how to specify a
                     fully-qualified string.)

      :returns: The buffer referenced by ``target``
      :rtype: torch.Tensor

      :raises AttributeError: If the target string references an invalid
          path or resolves to something that is not a
          buffer















      ..
          !! processed by numpydoc !!

   .. py:method:: get_extra_state(self)

      
      Returns any extra state to include in the module's state_dict.
      Implement this and a corresponding :func:`set_extra_state` for your module
      if you need to store extra state. This function is called when building the
      module's `state_dict()`.

      Note that extra state should be pickleable to ensure working serialization
      of the state_dict. We only provide provide backwards compatibility guarantees
      for serializing Tensors; other objects may break backwards compatibility if
      their serialized pickled form changes.

      :returns: Any extra state to store in the module's state_dict
      :rtype: object















      ..
          !! processed by numpydoc !!

   .. py:method:: set_extra_state(self, state)

      
      This function is called from :func:`load_state_dict` to handle any extra state
      found within the `state_dict`. Implement this function and a corresponding
      :func:`get_extra_state` for your module if you need to store extra state within its
      `state_dict`.

      :param state: Extra state from the `state_dict`
      :type state: dict















      ..
          !! processed by numpydoc !!

   .. py:method:: apply(self, fn)

      
      Applies ``fn`` recursively to every submodule (as returned by ``.children()``)
      as well as self. Typical use includes initializing the parameters of a model
      (see also :ref:`nn-init-doc`).

      :param fn: function to be applied to each submodule
      :type fn: :class:`Module` -> None

      :returns: self
      :rtype: Module

      Example::

          >>> @torch.no_grad()
          >>> def init_weights(m):
          >>>     print(m)
          >>>     if type(m) == nn.Linear:
          >>>         m.weight.fill_(1.0)
          >>>         print(m.weight)
          >>> net = nn.Sequential(nn.Linear(2, 2), nn.Linear(2, 2))
          >>> net.apply(init_weights)
          Linear(in_features=2, out_features=2, bias=True)
          Parameter containing:
          tensor([[ 1.,  1.],
                  [ 1.,  1.]])
          Linear(in_features=2, out_features=2, bias=True)
          Parameter containing:
          tensor([[ 1.,  1.],
                  [ 1.,  1.]])
          Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )
          Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )















      ..
          !! processed by numpydoc !!

   .. py:method:: cuda(self, device = None)

      
      Moves all model parameters and buffers to the GPU.

      This also makes associated parameters and buffers different objects. So
      it should be called before constructing optimizer if the module will
      live on GPU while being optimized.

      .. note::
          This method modifies the module in-place.

      :param device: if specified, all parameters will be
                     copied to that device
      :type device: int, optional

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: xpu(self, device = None)

      
      Moves all model parameters and buffers to the XPU.

      This also makes associated parameters and buffers different objects. So
      it should be called before constructing optimizer if the module will
      live on XPU while being optimized.

      .. note::
          This method modifies the module in-place.

      :param device: if specified, all parameters will be
                     copied to that device
      :type device: int, optional

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: cpu(self)

      
      Moves all model parameters and buffers to the CPU.

      .. note::
          This method modifies the module in-place.

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: bfloat16(self)

      
      Casts all floating point parameters and buffers to ``bfloat16`` datatype.

      .. note::
          This method modifies the module in-place.

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: to_empty(self, *, device)

      
      Moves the parameters and buffers to the specified device without copying storage.

      :param device: The desired device of the parameters
                     and buffers in this module.
      :type device: :class:`torch.device`

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: to(self: T, device: Optional[Union[int, Module.to.device]] = ..., dtype: Optional[Union[Module.to.dtype, str]] = ..., non_blocking: bool = ...) -> T
               to(self: T, dtype: Union[Module.to.dtype, str], non_blocking: bool = ...) -> T
               to(self: T, tensor: torch.Tensor, non_blocking: bool = ...) -> T

      
      Moves and/or casts the parameters and buffers.

      This can be called as

      .. function:: to(device=None, dtype=None, non_blocking=False)
         :noindex:

      .. function:: to(dtype, non_blocking=False)
         :noindex:

      .. function:: to(tensor, non_blocking=False)
         :noindex:

      .. function:: to(memory_format=torch.channels_last)
         :noindex:

      Its signature is similar to :meth:`torch.Tensor.to`, but only accepts
      floating point or complex :attr:`dtype`\ s. In addition, this method will
      only cast the floating point or complex parameters and buffers to :attr:`dtype`
      (if given). The integral parameters and buffers will be moved
      :attr:`device`, if that is given, but with dtypes unchanged. When
      :attr:`non_blocking` is set, it tries to convert/move asynchronously
      with respect to the host if possible, e.g., moving CPU Tensors with
      pinned memory to CUDA devices.

      See below for examples.

      .. note::
          This method modifies the module in-place.

      :param device: the desired device of the parameters
                     and buffers in this module
      :type device: :class:`torch.device`
      :param dtype: the desired floating point or complex dtype of
                    the parameters and buffers in this module
      :type dtype: :class:`torch.dtype`
      :param tensor: Tensor whose dtype and device are the desired
                     dtype and device for all parameters and buffers in this module
      :type tensor: torch.Tensor
      :param memory_format: the desired memory
                            format for 4D parameters and buffers in this module (keyword
                            only argument)
      :type memory_format: :class:`torch.memory_format`

      :returns: self
      :rtype: Module

      Examples::

          >>> linear = nn.Linear(2, 2)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1913, -0.3420],
                  [-0.5113, -0.2325]])
          >>> linear.to(torch.double)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1913, -0.3420],
                  [-0.5113, -0.2325]], dtype=torch.float64)
          >>> gpu1 = torch.device("cuda:1")
          >>> linear.to(gpu1, dtype=torch.half, non_blocking=True)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1914, -0.3420],
                  [-0.5112, -0.2324]], dtype=torch.float16, device='cuda:1')
          >>> cpu = torch.device("cpu")
          >>> linear.to(cpu)
          Linear(in_features=2, out_features=2, bias=True)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.1914, -0.3420],
                  [-0.5112, -0.2324]], dtype=torch.float16)

          >>> linear = nn.Linear(2, 2, bias=None).to(torch.cdouble)
          >>> linear.weight
          Parameter containing:
          tensor([[ 0.3741+0.j,  0.2382+0.j],
                  [ 0.5593+0.j, -0.4443+0.j]], dtype=torch.complex128)
          >>> linear(torch.ones(3, 2, dtype=torch.cdouble))
          tensor([[0.6122+0.j, 0.1150+0.j],
                  [0.6122+0.j, 0.1150+0.j],
                  [0.6122+0.j, 0.1150+0.j]], dtype=torch.complex128)















      ..
          !! processed by numpydoc !!

   .. py:method:: register_backward_hook(self, hook)

      
      Registers a backward hook on the module.

      This function is deprecated in favor of :meth:`~torch.nn.Module.register_full_backward_hook` and
      the behavior of this function will change in future versions.

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`















      ..
          !! processed by numpydoc !!

   .. py:method:: register_full_backward_hook(self, hook)

      
      Registers a backward hook on the module.

      The hook will be called every time the gradients with respect to module
      inputs are computed. The hook should have the following signature::

          hook(module, grad_input, grad_output) -> tuple(Tensor) or None

      The :attr:`grad_input` and :attr:`grad_output` are tuples that contain the gradients
      with respect to the inputs and outputs respectively. The hook should
      not modify its arguments, but it can optionally return a new gradient with
      respect to the input that will be used in place of :attr:`grad_input` in
      subsequent computations. :attr:`grad_input` will only correspond to the inputs given
      as positional arguments and all kwarg arguments are ignored. Entries
      in :attr:`grad_input` and :attr:`grad_output` will be ``None`` for all non-Tensor
      arguments.

      For technical reasons, when this hook is applied to a Module, its forward function will
      receive a view of each Tensor passed to the Module. Similarly the caller will receive a view
      of each Tensor returned by the Module's forward function.

      .. warning ::
          Modifying inputs or outputs inplace is not allowed when using backward hooks and
          will raise an error.

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`















      ..
          !! processed by numpydoc !!

   .. py:method:: register_forward_pre_hook(self, hook)

      
      Registers a forward pre-hook on the module.

      The hook will be called every time before :func:`forward` is invoked.
      It should have the following signature::

          hook(module, input) -> None or modified input

      The input contains only the positional arguments given to the module.
      Keyword arguments won't be passed to the hooks and only to the ``forward``.
      The hook can modify the input. User can either return a tuple or a
      single modified value in the hook. We will wrap the value into a tuple
      if a single value is returned(unless that value is already a tuple).

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`















      ..
          !! processed by numpydoc !!

   .. py:method:: register_forward_hook(self, hook)

      
      Registers a forward hook on the module.

      The hook will be called every time after :func:`forward` has computed an output.
      It should have the following signature::

          hook(module, input, output) -> None or modified output

      The input contains only the positional arguments given to the module.
      Keyword arguments won't be passed to the hooks and only to the ``forward``.
      The hook can modify the output. It can modify the input inplace but
      it will not have effect on forward since this is called after
      :func:`forward` is called.

      :returns:     a handle that can be used to remove the added hook by calling
                    ``handle.remove()``
      :rtype: :class:`torch.utils.hooks.RemovableHandle`















      ..
          !! processed by numpydoc !!

   .. py:method:: load_state_dict(self, state_dict, strict = True)

      
      Copies parameters and buffers from :attr:`state_dict` into
      this module and its descendants. If :attr:`strict` is ``True``, then
      the keys of :attr:`state_dict` must exactly match the keys returned
      by this module's :meth:`~torch.nn.Module.state_dict` function.

      :param state_dict: a dict containing parameters and
                         persistent buffers.
      :type state_dict: dict
      :param strict: whether to strictly enforce that the keys
                     in :attr:`state_dict` match the keys returned by this module's
                     :meth:`~torch.nn.Module.state_dict` function. Default: ``True``
      :type strict: bool, optional

      :returns:     * **missing_keys** is a list of str containing the missing keys
                    * **unexpected_keys** is a list of str containing the unexpected keys
      :rtype: ``NamedTuple`` with ``missing_keys`` and ``unexpected_keys`` fields

      .. note::

         If a parameter or buffer is registered as ``None`` and its corresponding key
         exists in :attr:`state_dict`, :meth:`load_state_dict` will raise a
         ``RuntimeError``.















      ..
          !! processed by numpydoc !!

   .. py:method:: parameters(self, recurse = True)

      
      Returns an iterator over module parameters.

      This is typically passed to an optimizer.

      :param recurse: if True, then yields parameters of this module
                      and all submodules. Otherwise, yields only parameters that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *Parameter* -- module parameter

      Example::

          >>> for param in model.parameters():
          >>>     print(type(param), param.size())
          <class 'torch.Tensor'> (20L,)
          <class 'torch.Tensor'> (20L, 1L, 5L, 5L)















      ..
          !! processed by numpydoc !!

   .. py:method:: named_parameters(self, prefix = '', recurse = True)

      
      Returns an iterator over module parameters, yielding both the
      name of the parameter as well as the parameter itself.

      :param prefix: prefix to prepend to all parameter names.
      :type prefix: str
      :param recurse: if True, then yields parameters of this module
                      and all submodules. Otherwise, yields only parameters that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *(string, Parameter)* -- Tuple containing the name and parameter

      Example::

          >>> for name, param in self.named_parameters():
          >>>    if name in ['bias']:
          >>>        print(param.size())















      ..
          !! processed by numpydoc !!

   .. py:method:: buffers(self, recurse = True)

      
      Returns an iterator over module buffers.

      :param recurse: if True, then yields buffers of this module
                      and all submodules. Otherwise, yields only buffers that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *torch.Tensor* -- module buffer

      Example::

          >>> for buf in model.buffers():
          >>>     print(type(buf), buf.size())
          <class 'torch.Tensor'> (20L,)
          <class 'torch.Tensor'> (20L, 1L, 5L, 5L)















      ..
          !! processed by numpydoc !!

   .. py:method:: named_buffers(self, prefix = '', recurse = True)

      
      Returns an iterator over module buffers, yielding both the
      name of the buffer as well as the buffer itself.

      :param prefix: prefix to prepend to all buffer names.
      :type prefix: str
      :param recurse: if True, then yields buffers of this module
                      and all submodules. Otherwise, yields only buffers that
                      are direct members of this module.
      :type recurse: bool

      :Yields: *(string, torch.Tensor)* -- Tuple containing the name and buffer

      Example::

          >>> for name, buf in self.named_buffers():
          >>>    if name in ['running_var']:
          >>>        print(buf.size())















      ..
          !! processed by numpydoc !!

   .. py:method:: children(self)

      
      Returns an iterator over immediate children modules.

      :Yields: *Module* -- a child module















      ..
          !! processed by numpydoc !!

   .. py:method:: named_children(self)

      
      Returns an iterator over immediate children modules, yielding both
      the name of the module as well as the module itself.

      :Yields: *(string, Module)* -- Tuple containing a name and child module

      Example::

          >>> for name, module in model.named_children():
          >>>     if name in ['conv4', 'conv5']:
          >>>         print(module)















      ..
          !! processed by numpydoc !!

   .. py:method:: modules(self)

      
      Returns an iterator over all modules in the network.

      :Yields: *Module* -- a module in the network

      .. note::

         Duplicate modules are returned only once. In the following
         example, ``l`` will be returned only once.

      Example::

          >>> l = nn.Linear(2, 2)
          >>> net = nn.Sequential(l, l)
          >>> for idx, m in enumerate(net.modules()):
                  print(idx, '->', m)

          0 -> Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          )
          1 -> Linear(in_features=2, out_features=2, bias=True)















      ..
          !! processed by numpydoc !!

   .. py:method:: named_modules(self, memo = None, prefix = '', remove_duplicate = True)

      
      Returns an iterator over all modules in the network, yielding
      both the name of the module as well as the module itself.

      :param memo: a memo to store the set of modules already added to the result
      :param prefix: a prefix that will be added to the name of the module
      :param remove_duplicate: whether to remove the duplicated module instances in the result
      :param or not:

      :Yields: *(string, Module)* -- Tuple of name and module

      .. note::

         Duplicate modules are returned only once. In the following
         example, ``l`` will be returned only once.

      Example::

          >>> l = nn.Linear(2, 2)
          >>> net = nn.Sequential(l, l)
          >>> for idx, m in enumerate(net.named_modules()):
                  print(idx, '->', m)

          0 -> ('', Sequential(
            (0): Linear(in_features=2, out_features=2, bias=True)
            (1): Linear(in_features=2, out_features=2, bias=True)
          ))
          1 -> ('0', Linear(in_features=2, out_features=2, bias=True))















      ..
          !! processed by numpydoc !!

   .. py:method:: train(self, mode = True)

      
      Sets the module in training mode.

      This has any effect only on certain modules. See documentations of
      particular modules for details of their behaviors in training/evaluation
      mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,
      etc.

      :param mode: whether to set training mode (``True``) or evaluation
                   mode (``False``). Default: ``True``.
      :type mode: bool

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: eval(self)

      
      Sets the module in evaluation mode.

      This has any effect only on certain modules. See documentations of
      particular modules for details of their behaviors in training/evaluation
      mode, if they are affected, e.g. :class:`Dropout`, :class:`BatchNorm`,
      etc.

      This is equivalent with :meth:`self.train(False) <torch.nn.Module.train>`.

      See :ref:`locally-disable-grad-doc` for a comparison between
      `.eval()` and several similar mechanisms that may be confused with it.

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: requires_grad_(self, requires_grad = True)

      
      Change if autograd should record operations on parameters in this
      module.

      This method sets the parameters' :attr:`requires_grad` attributes
      in-place.

      This method is helpful for freezing part of the module for finetuning
      or training parts of a model individually (e.g., GAN training).

      See :ref:`locally-disable-grad-doc` for a comparison between
      `.requires_grad_()` and several similar mechanisms that may be confused with it.

      :param requires_grad: whether autograd should record operations on
                            parameters in this module. Default: ``True``.
      :type requires_grad: bool

      :returns: self
      :rtype: Module















      ..
          !! processed by numpydoc !!

   .. py:method:: zero_grad(self, set_to_none = False)

      
      Sets gradients of all model parameters to zero. See similar function
      under :class:`torch.optim.Optimizer` for more context.

      :param set_to_none: instead of setting to zero, set the grads to None.
                          See :meth:`torch.optim.Optimizer.zero_grad` for details.
      :type set_to_none: bool















      ..
          !! processed by numpydoc !!

   .. py:method:: share_memory(self)

      
      See :meth:`torch.Tensor.share_memory_`
















      ..
          !! processed by numpydoc !!

   .. py:method:: extra_repr(self)

      
      Set the extra representation of the module

      To print customized extra information, you should re-implement
      this method in your own modules. Both single-line and multi-line
      strings are acceptable.















      ..
          !! processed by numpydoc !!


