:py:mod:`latte.functional.disentanglement.mutual_info`
======================================================

.. py:module:: latte.functional.disentanglement.mutual_info

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   latte.functional.disentanglement.mutual_info.get_mi_func
   latte.functional.disentanglement.mutual_info.latent_attr_mutual_info
   latte.functional.disentanglement.mutual_info.single_mutual_info
   latte.functional.disentanglement.mutual_info.entropy
   latte.functional.disentanglement.mutual_info.conditional_entropy
   latte.functional.disentanglement.mutual_info.mig
   latte.functional.disentanglement.mutual_info.dmig
   latte.functional.disentanglement.mutual_info.dlig
   latte.functional.disentanglement.mutual_info.xmig



.. py:function:: get_mi_func(discrete)

   
   Get mutual information function depending on whether the attribute is discrete

   :param discrete: whether the attribute is discrete
   :type discrete: bool

   :returns: mutual information function handle
   :rtype: Callable















   ..
       !! processed by numpydoc !!

.. py:function:: latent_attr_mutual_info(z, a, discrete = False)

   
   Calculate mutual information between latent vectors and a target attribute.

   :param z: a batch of latent vectors
   :type z: np.ndarray, (n_samples, n_features)
   :param a: a batch of one attribute
   :type a: np.ndarray, (n_samples,)
   :param discrete: whether the attribute is discrete, by default False
   :type discrete: bool, optional

   :returns: mutual information between each latent vector dimension and the attribute
   :rtype: np.ndarray, (n_features,)















   ..
       !! processed by numpydoc !!

.. py:function:: single_mutual_info(a, b, discrete)

   
   Calculate mutual information between two variables

   :param a: a batch of a feature variable
   :type a: np.ndarray, (n_samples,)
   :param b: a batch of a target variable
   :type b: np.ndarray, (n_samples,)
   :param discrete: whether the target variable is discrete, by default False
   :type discrete: bool, optional

   :returns: mutual information between the variables
   :rtype: float















   ..
       !! processed by numpydoc !!

.. py:function:: entropy(a, discrete = False)

   
   Calculate entropy of a variable

   :param a: a batch of the variable
   :type a: np.ndarray, (n_samples,)
   :param discrete: whether the variable is discrete, by default False
   :type discrete: bool, optional

   :returns: entropy of the variable
   :rtype: float















   ..
       !! processed by numpydoc !!

.. py:function:: conditional_entropy(ai, aj, discrete = False)

   
   Calculate conditional entropy of a variable given another variable.

   .. math:: \mathcal{H}(a_i|a_j) = \mathcal{H}(a_i) - \mathcal{I}(a_i, a_j),

   where :math:`\mathcal{I}(\cdot,\cdot)` is mutual information, and :math:`\mathcal{H}(\cdot)` is entropy.

   :param ai: a batch of the first variable
   :type ai: np.ndarray, (n_samples,)
   :param aj: a batch of the conditioning variable
   :type aj: np.ndarray, (n_samples,)
   :param discrete: whether the variables are discrete, by default False
   :type discrete: bool, optional

   :returns: conditional entropy of `ai` given `aj`.
   :rtype: float















   ..
       !! processed by numpydoc !!

.. py:function:: mig(z, a, reg_dim = None, discrete = False, fill_reg_dim = False)

   
   Calculate Mutual Information Gap (MIG) between latent vectors and attributes.

   Mutual Information Gap measures the degree of disentanglement. For each attribute, MIG is calculated by difference in the mutual informations between that of the attribute and its most informative latent dimension, and that of the attribute and its second-most informative latent dimension. Mathematically, MIG is given by

   .. math:: \operatorname{MIG}(a_i, \mathbf{z}) = \dfrac{\mathcal{I}(a_i, z_j)-\mathcal{I}(a_i, z_k)}{\mathcal{H}(a_i)},

   where :math:`j=\operatorname{arg}\max_n \mathcal{I}(a_i, z_n)`, :math:`k=\operatorname{arg}\max_{n≠j} \mathcal{I}(a_i, z_n)`, :math:`\mathcal{I}(\cdot,\cdot)` is mutual information, and :math:`\mathcal{H}(\cdot)` is entropy. If `reg_dim` is specified, :math:`j` is instead overwritten to `reg_dim[i]`, while :math:`k=\operatorname{arg}\max_{n≠j} \mathcal{I}(a_i, z_n)` as usual.

   MIG is best applied for independent attributes.

   .. seealso::

      :obj:`dmig`
          Dependency-Aware Mutual Information Gap

      :obj:`xmig`
          Dependency-Blind Mutual Information Gap

      :obj:`dlig`
          Dependency-Aware Latent Information Gap

   :param z: a batch of latent vectors
   :type z: np.ndarray, (n_samples, n_features)
   :param a: a batch of attribute(s)
   :type a: np.ndarray, (n_samples, n_attributes) or (n_samples,)
   :param reg_dim: regularized dimensions, by default None
                   Attribute `a[:, i]` is regularized by `z[:, reg_dim[i]]`. If `reg_dim` is provided, the first mutual information is always taken between the regularized dimension and the attribute and MIG may be negative.
   :type reg_dim: Optional[List], optional
   :param discrete: Whether the attributes are discrete, by default False
   :type discrete: bool, optional
   :param fill_reg_dim: Whether to automatically fill `reg_dim` with `range(n_attributes)`, by default False
   :type fill_reg_dim: bool, optional

   :returns: MIG for each attribute
   :rtype: np.ndarray, (n_attributes,)

   .. rubric:: References

   .. [Rc16b187c67b2-1] Q. Chen, X. Li, R. Grosse, and D. Duvenaud, “Isolating sources of disentanglement in variational autoencoders”, in Proceedings of the 32nd International Conference on Neural Information Processing Systems, 2018.















   ..
       !! processed by numpydoc !!

.. py:function:: dmig(z, a, reg_dim = None, discrete = False)

   
   Calculate Dependency-Aware Mutual Information Gap (DMIG) between latent vectors and attributes

   :param z: a batch of latent vectors
   :type z: np.ndarray, (n_samples, n_features)
   :param a: a batch of attribute(s)
   :type a: np.ndarray, (n_samples, n_attributes) or (n_samples,)
   :param reg_dim: regularized dimensions, by default None
                   Attribute `a[:, i]` is regularized by `z[:, reg_dim[i]]`. If `None`, `a[:, i]` is assumed to be regularized by `z[:, i]`.
   :type reg_dim: Optional[List], optional
   :param discrete: Whether the attributes are discrete, by default False
   :type discrete: bool, optional

   :returns: DMIG for each attribute
   :rtype: np.ndarray, (n_attributes,)

   .. rubric:: References

   .. [R3bfc59b4b271-1] K. N. Watcharasupat and A. Lerch, “Evaluation of Latent Space Disentanglement in the Presence of Interdependent Attributes”, in Extended Abstracts of the Late-Breaking Demo Session of the 22nd International Society for Music Information Retrieval Conference, 2021.
   .. [R3bfc59b4b271-2] K. N. Watcharasupat, “Controllable Music: Supervised Learning of Disentangled Representations for Music Generation”, 2021.















   ..
       !! processed by numpydoc !!

.. py:function:: dlig(z, a, reg_dim = None, discrete = False)

   
   Calculate Dependency-Aware Latent Information Gap (DLIG) between latent vectors and attributes

   :param z: a batch of latent vectors
   :type z: np.ndarray, (n_samples, n_features)
   :param a: a batch of at least two attributes
   :type a: np.ndarray, (n_samples, n_attributes)
   :param reg_dim: regularized dimensions, by default None
                   Attribute `a[:, i]` is regularized by `z[:, reg_dim[i]]`. If `None`, `a[:, i]` is assumed to be regularized by `z[:, i]`.
   :type reg_dim: Optional[List], optional
   :param discrete: Whether the attributes are discrete, by default False
   :type discrete: bool, optional

   :returns: DLIG for each attribute
   :rtype: np.ndarray, (n_attributes,)

   .. rubric:: References

   .. [Rcda703c5a7eb-1] K. N. Watcharasupat, “Controllable Music: Supervised Learning of Disentangled Representations for Music Generation”, 2021.















   ..
       !! processed by numpydoc !!

.. py:function:: xmig(z, a, reg_dim = None, discrete = False)

   
   Calculate Dependency-Blind Mutual Information Gap (XMIG) between latent vectors and attributes

   :param z: a batch of latent vectors
   :type z: np.ndarray, (n_samples, n_features)
   :param a: a batch of attribute(s)
   :type a: np.ndarray, (n_samples, n_attributes) or (n_samples,)
   :param reg_dim: regularized dimensions, by default None
                   Attribute `a[:, i]` is regularized by `z[:, reg_dim[i]]`. If `None`, `a[:, i]` is assumed to be regularized by `z[:, i]`.
   :type reg_dim: Optional[List], optional
   :param discrete: Whether the attributes are discrete, by default False
   :type discrete: bool, optional

   :returns: XMIG for each attribute
   :rtype: np.ndarray, (n_attributes,)

   .. rubric:: References

   .. [Rb9564093a74c-1] K. N. Watcharasupat, “Controllable Music: Supervised Learning of Disentangled Representations for Music Generation”, 2021.















   ..
       !! processed by numpydoc !!

