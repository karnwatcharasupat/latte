:py:mod:`latte.functional.interpolatability.monotonicity`
=========================================================

.. py:module:: latte.functional.interpolatability.monotonicity

.. autoapi-nested-parse::

   
   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   latte.functional.interpolatability.monotonicity.monotonicity



.. py:function:: monotonicity(z, a, reg_dim = None, liad_mode = 'forward', reduce_mode = 'attribute', liad_thresh = 0.001, degenerate_val = np.nan, nanmean = True)

   
   Calculate latent monotonicity.

   :param z: a batch of latent vectors
   :type z: np.ndarray, (n_samples, n_interp) or (n_samples, n_features or n_attributes, n_interp)
   :param a: a batch of attribute(s)
   :type a: np.ndarray, (n_samples, n_interp) or (n_samples, n_attributes, n_interp)
   :param reg_dim: regularized dimensions, by default None
                   Attribute `a[:, i]` is regularized by `z[:, reg_dim[i]]`. If `None`, `a[:, i]` is assumed to be regularized by `z[:, i]`.
   :type reg_dim: Optional[List], optional
   :param liad_mode: options for calculating LIAD, by default "forward". Only "forward" is currently supported.
   :type liad_mode: str, optional
   :param reduce_mode: options for reduction of the return array, by default "attribute". Must be one of {"attribute", "samples", "all", "none"}. If "all", returns a scalar. If "attribute", an average is taken along the sample axis and the return array is of shape `(n_attributes,)`. If "samples", an average is taken along the attribute axis and the return array is of shape `(n_samples,)`. If "none", returns a smoothness matrix of shape `(n_samples, n_attributes,)`.
   :type reduce_mode: str, optional
   :param liad_thresh: threshold for ignoring noisy 1st order LIAD, by default 1e-3
   :type liad_thresh: float, optional
   :param degenerate_val: fill value for samples with all noisy LIAD (i.e., absolute value below `liad_thresh`), by default np.nan. Another possible option is to set this to 0.0.
   :type degenerate_val: float, optional
   :param nanmean: whether to ignore the NaN values in calculating the return array, by default True. Ignored if `reduce_mode` is "none". If all LIAD in an axis are NaNs, the return array in that axis is filled with NaNs.
   :type nanmean: bool, optional

   :returns: monotonicity array. See `reduce mode` for return shape.
   :rtype: np.ndarray

   .. rubric:: References

   .. [R6fff38aa5976-1] K. N. Watcharasupat, “Controllable Music: Supervised Learning of Disentangled Representations for Music Generation”, 2021.















   ..
       !! processed by numpydoc !!

